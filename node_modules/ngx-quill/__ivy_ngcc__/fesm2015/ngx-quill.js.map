{"version":3,"sources":["D:/PROJECTS/TAZAMA/oprt-fe/node_modules/ngx-quill/fesm2015/ngx-quill.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAkbE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DA8F0D,AAsBzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iIA8BD;;;;;;;;;;;qCAWmC,AAgBlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;khBA6ED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAkC+B,AAY9B;;;;;;;;;;;;;;;;;;;;;EAmBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAYc","file":"ngx-quill.js","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, EventEmitter, SecurityContext, ElementRef, Inject, PLATFORM_ID, Renderer2, NgZone, Input, Output, Component, ViewEncapsulation, forwardRef, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nconst defaultModules = {\n    toolbar: [\n        ['bold', 'italic', 'underline', 'strike'],\n        ['blockquote', 'code-block'],\n        [{ header: 1 }, { header: 2 }],\n        [{ list: 'ordered' }, { list: 'bullet' }],\n        [{ script: 'sub' }, { script: 'super' }],\n        [{ indent: '-1' }, { indent: '+1' }],\n        [{ direction: 'rtl' }],\n        [{ size: ['small', false, 'large', 'huge'] }],\n        [{ header: [1, 2, 3, 4, 5, 6, false] }],\n        [\n            { color: [] },\n            { background: [] }\n        ],\n        [{ font: [] }],\n        [{ align: [] }],\n        ['clean'],\n        ['link', 'image', 'video'] // link and image, video\n    ]\n};\n\nconst QUILL_CONFIG_TOKEN = new InjectionToken('config');\n\nconst getFormat = (format, configFormat) => {\n    const passedFormat = format || configFormat;\n    return passedFormat || 'html';\n};\n\nvar QuillEditorComponent_1;\nlet Quill = null;\nlet QuillEditorComponent = QuillEditorComponent_1 = class QuillEditorComponent {\n    constructor(elementRef, domSanitizer, doc, platformId, renderer, zone, config) {\n        this.elementRef = elementRef;\n        this.domSanitizer = domSanitizer;\n        this.doc = doc;\n        this.platformId = platformId;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.config = config;\n        this.required = false;\n        this.customToolbarPosition = 'top';\n        this.sanitize = false;\n        this.styles = null;\n        this.strict = true;\n        this.customOptions = [];\n        this.preserveWhitespace = false;\n        this.onEditorCreated = new EventEmitter();\n        this.onEditorChanged = new EventEmitter();\n        this.onContentChanged = new EventEmitter();\n        this.onSelectionChanged = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.disabled = false; // used to store initial value before ViewInit\n        this.valueGetter = (quillEditor, editorElement) => {\n            let html = editorElement.querySelector('.ql-editor').innerHTML;\n            if (html === '<p><br></p>' || html === '<div><br></div>') {\n                html = null;\n            }\n            let modelValue = html;\n            const format = getFormat(this.format, this.config.format);\n            if (format === 'text') {\n                modelValue = quillEditor.getText();\n            }\n            else if (format === 'object') {\n                modelValue = quillEditor.getContents();\n            }\n            else if (format === 'json') {\n                try {\n                    modelValue = JSON.stringify(quillEditor.getContents());\n                }\n                catch (e) {\n                    modelValue = quillEditor.getText();\n                }\n            }\n            return modelValue;\n        };\n        this.valueSetter = (quillEditor, value) => {\n            const format = getFormat(this.format, this.config.format);\n            if (format === 'html') {\n                if (this.sanitize) {\n                    value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n                }\n                return quillEditor.clipboard.convert(value);\n            }\n            else if (format === 'json') {\n                try {\n                    return JSON.parse(value);\n                }\n                catch (e) {\n                    return [{ insert: value }];\n                }\n            }\n            return value;\n        };\n        this.selectionChangeHandler = (range, oldRange, source) => {\n            const shouldTriggerOnModelTouched = !range && this.onModelTouched;\n            // only emit changes when there's any listener\n            if (!this.onBlur.observers.length &&\n                !this.onFocus.observers.length &&\n                !this.onSelectionChanged.observers.length &&\n                !shouldTriggerOnModelTouched) {\n                return;\n            }\n            this.zone.run(() => {\n                if (range === null) {\n                    this.onBlur.emit({\n                        editor: this.quillEditor,\n                        source\n                    });\n                }\n                else if (oldRange === null) {\n                    this.onFocus.emit({\n                        editor: this.quillEditor,\n                        source\n                    });\n                }\n                this.onSelectionChanged.emit({\n                    editor: this.quillEditor,\n                    oldRange,\n                    range,\n                    source\n                });\n                if (shouldTriggerOnModelTouched) {\n                    this.onModelTouched();\n                }\n            });\n        };\n        this.textChangeHandler = (delta, oldDelta, source) => {\n            // only emit changes emitted by user interactions\n            const text = this.quillEditor.getText();\n            const content = this.quillEditor.getContents();\n            let html = this.editorElem.querySelector('.ql-editor').innerHTML;\n            if (html === '<p><br></p>' || html === '<div><br></div>') {\n                html = null;\n            }\n            const trackChanges = this.trackChanges || this.config.trackChanges;\n            const shouldTriggerOnModelChange = (source === Quill.sources.USER || trackChanges && trackChanges === 'all') && this.onModelChange;\n            // only emit changes when there's any listener\n            if (!this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n                return;\n            }\n            this.zone.run(() => {\n                if (shouldTriggerOnModelChange) {\n                    this.onModelChange(this.valueGetter(this.quillEditor, this.editorElem));\n                }\n                this.onContentChanged.emit({\n                    content,\n                    delta,\n                    editor: this.quillEditor,\n                    html,\n                    oldDelta,\n                    source,\n                    text\n                });\n            });\n        };\n        this.editorChangeHandler = (event, current, old, source) => {\n            // only emit changes when there's any listener\n            if (!this.onEditorChanged.observers.length) {\n                return;\n            }\n            // only emit changes emitted by user interactions\n            if (event === 'text-change') {\n                const text = this.quillEditor.getText();\n                const content = this.quillEditor.getContents();\n                let html = this.editorElem.querySelector('.ql-editor').innerHTML;\n                if (html === '<p><br></p>' || html === '<div><br></div>') {\n                    html = null;\n                }\n                this.zone.run(() => {\n                    this.onEditorChanged.emit({\n                        content,\n                        delta: current,\n                        editor: this.quillEditor,\n                        event,\n                        html,\n                        oldDelta: old,\n                        source,\n                        text\n                    });\n                });\n            }\n            else {\n                this.onEditorChanged.emit({\n                    editor: this.quillEditor,\n                    event,\n                    oldRange: old,\n                    range: current,\n                    source\n                });\n            }\n        };\n    }\n    static normalizeClassNames(classes) {\n        const classList = classes.trim().split(' ');\n        return classList.reduce((prev, cur) => {\n            const trimmed = cur.trim();\n            if (trimmed) {\n                prev.push(trimmed);\n            }\n            return prev;\n        }, []);\n    }\n    onModelChange(_modelValue) { }\n    onModelTouched() { }\n    ngAfterViewInit() {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        if (!Quill) {\n            this.zone.runOutsideAngular(() => {\n                Quill = require('quill');\n            });\n        }\n        this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\n        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n        const toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n        const modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));\n        if (toolbarElem) {\n            modules.toolbar = toolbarElem;\n        }\n        else if (modules.toolbar === undefined) {\n            modules.toolbar = defaultModules.toolbar;\n        }\n        let placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder;\n        if (placeholder === undefined) {\n            placeholder = 'Insert text here ...';\n        }\n        if (this.styles) {\n            Object.keys(this.styles).forEach((key) => {\n                this.renderer.setStyle(this.editorElem, key, this.styles[key]);\n            });\n        }\n        if (this.classes) {\n            this.addClasses(this.classes);\n        }\n        this.customOptions.forEach((customOption) => {\n            const newCustomOption = Quill.import(customOption.import);\n            newCustomOption.whitelist = customOption.whitelist;\n            Quill.register(newCustomOption, true);\n        });\n        let bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;\n        if (!bounds) {\n            bounds = this.config.bounds ? this.config.bounds : this.doc.body;\n        }\n        let debug = this.debug;\n        if (!debug && debug !== false && this.config.debug) {\n            debug = this.config.debug;\n        }\n        let readOnly = this.readOnly;\n        if (!readOnly && this.readOnly !== false) {\n            readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false;\n        }\n        let scrollingContainer = this.scrollingContainer;\n        if (!scrollingContainer && this.scrollingContainer !== null) {\n            scrollingContainer = this.config.scrollingContainer === null || this.config.scrollingContainer ? this.config.scrollingContainer : null;\n        }\n        let formats = this.formats;\n        if (!formats && formats === undefined) {\n            formats = this.config.formats ? [...this.config.formats] : (this.config.formats === null ? null : undefined);\n        }\n        this.zone.runOutsideAngular(() => {\n            this.quillEditor = new Quill(this.editorElem, {\n                bounds,\n                debug,\n                formats,\n                modules,\n                placeholder,\n                readOnly,\n                scrollingContainer,\n                strict: this.strict,\n                theme: this.theme || (this.config.theme ? this.config.theme : 'snow')\n            });\n        });\n        if (this.content) {\n            const format = getFormat(this.format, this.config.format);\n            if (format === 'object') {\n                this.quillEditor.setContents(this.content, 'silent');\n            }\n            else if (format === 'text') {\n                this.quillEditor.setText(this.content, 'silent');\n            }\n            else if (format === 'json') {\n                try {\n                    this.quillEditor.setContents(JSON.parse(this.content), 'silent');\n                }\n                catch (e) {\n                    this.quillEditor.setText(this.content, 'silent');\n                }\n            }\n            else {\n                if (this.sanitize) {\n                    this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);\n                }\n                const contents = this.quillEditor.clipboard.convert(this.content);\n                this.quillEditor.setContents(contents, 'silent');\n            }\n            this.quillEditor.history.clear();\n        }\n        // initialize disabled status based on this.disabled as default value\n        this.setDisabledState();\n        // triggered if selection or text changed\n        this.quillEditor.on('editor-change', this.editorChangeHandler);\n        // mark model as touched if editor lost focus\n        this.quillEditor.on('selection-change', this.selectionChangeHandler);\n        // update model if text changes\n        this.quillEditor.on('text-change', this.textChangeHandler);\n        // trigger created in a timeout to avoid changed models after checked\n        // if you are using the editor api in created output to change the editor content\n        setTimeout(() => this.onEditorCreated.emit(this.quillEditor));\n    }\n    ngOnDestroy() {\n        if (this.quillEditor) {\n            this.quillEditor.off('selection-change', this.selectionChangeHandler);\n            this.quillEditor.off('text-change', this.textChangeHandler);\n            this.quillEditor.off('editor-change', this.editorChangeHandler);\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this.quillEditor) {\n            return;\n        }\n        // tslint:disable:no-string-literal\n        if (changes['readOnly']) {\n            this.quillEditor.enable(!changes['readOnly'].currentValue);\n        }\n        if (changes['placeholder']) {\n            this.quillEditor.root.dataset.placeholder =\n                changes['placeholder'].currentValue;\n        }\n        if (changes['styles']) {\n            const currentStyling = changes['styles'].currentValue;\n            const previousStyling = changes['styles'].previousValue;\n            if (previousStyling) {\n                Object.keys(previousStyling).forEach((key) => {\n                    this.renderer.removeStyle(this.editorElem, key);\n                });\n            }\n            if (currentStyling) {\n                Object.keys(currentStyling).forEach((key) => {\n                    this.renderer.setStyle(this.editorElem, key, this.styles[key]);\n                });\n            }\n        }\n        if (changes['classes']) {\n            const currentClasses = changes['classes'].currentValue;\n            const previousClasses = changes['classes'].previousValue;\n            if (previousClasses) {\n                this.removeClasses(previousClasses);\n            }\n            if (currentClasses) {\n                this.addClasses(currentClasses);\n            }\n        }\n        // tslint:enable:no-string-literal\n    }\n    addClasses(classList) {\n        QuillEditorComponent_1.normalizeClassNames(classList).forEach((c) => {\n            this.renderer.addClass(this.editorElem, c);\n        });\n    }\n    removeClasses(classList) {\n        QuillEditorComponent_1.normalizeClassNames(classList).forEach((c) => {\n            this.renderer.removeClass(this.editorElem, c);\n        });\n    }\n    writeValue(currentValue) {\n        this.content = currentValue;\n        const format = getFormat(this.format, this.config.format);\n        if (this.quillEditor) {\n            if (currentValue) {\n                if (format === 'text') {\n                    this.quillEditor.setText(currentValue);\n                }\n                else {\n                    this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));\n                }\n                return;\n            }\n            this.quillEditor.setText('');\n        }\n    }\n    setDisabledState(isDisabled = this.disabled) {\n        // store initial value to set appropriate disabled status after ViewInit\n        this.disabled = isDisabled;\n        if (this.quillEditor) {\n            if (isDisabled) {\n                this.quillEditor.disable();\n                this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n            }\n            else {\n                if (!this.readOnly) {\n                    this.quillEditor.enable();\n                }\n                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n            }\n        }\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    validate() {\n        if (!this.quillEditor) {\n            return null;\n        }\n        const err = {};\n        let valid = true;\n        const textLength = this.quillEditor.getText().trim().length;\n        if (this.minLength && textLength && textLength < this.minLength) {\n            err.minLengthError = {\n                given: textLength,\n                minLength: this.minLength\n            };\n            valid = false;\n        }\n        if (this.maxLength && textLength > this.maxLength) {\n            err.maxLengthError = {\n                given: textLength,\n                maxLength: this.maxLength\n            };\n            valid = false;\n        }\n        if (this.required && !textLength) {\n            err.requiredError = {\n                empty: true\n            };\n            valid = false;\n        }\n        return valid ? null : err;\n    }\n};\nQuillEditorComponent.ctorParameters = () => [\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },\n    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }\n];\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"format\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"modules\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"debug\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"readOnly\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"placeholder\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"maxLength\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"minLength\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"required\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"formats\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"customToolbarPosition\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"sanitize\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"styles\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"strict\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"scrollingContainer\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"bounds\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"customOptions\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"trackChanges\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"preserveWhitespace\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"classes\", void 0);\n__decorate([\n    Output()\n], QuillEditorComponent.prototype, \"onEditorCreated\", void 0);\n__decorate([\n    Output()\n], QuillEditorComponent.prototype, \"onEditorChanged\", void 0);\n__decorate([\n    Output()\n], QuillEditorComponent.prototype, \"onContentChanged\", void 0);\n__decorate([\n    Output()\n], QuillEditorComponent.prototype, \"onSelectionChanged\", void 0);\n__decorate([\n    Output()\n], QuillEditorComponent.prototype, \"onFocus\", void 0);\n__decorate([\n    Output()\n], QuillEditorComponent.prototype, \"onBlur\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"valueGetter\", void 0);\n__decorate([\n    Input()\n], QuillEditorComponent.prototype, \"valueSetter\", void 0);\nQuillEditorComponent = QuillEditorComponent_1 = __decorate([\n    Component({\n        encapsulation: ViewEncapsulation.None,\n        providers: [\n            {\n                multi: true,\n                provide: NG_VALUE_ACCESSOR,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                useExisting: forwardRef(() => QuillEditorComponent_1)\n            },\n            {\n                multi: true,\n                provide: NG_VALIDATORS,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                useExisting: forwardRef(() => QuillEditorComponent_1)\n            }\n        ],\n        selector: 'quill-editor',\n        template: `\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n`\n    }),\n    __param(0, Inject(ElementRef)),\n    __param(1, Inject(DomSanitizer)),\n    __param(2, Inject(DOCUMENT)),\n    __param(3, Inject(PLATFORM_ID)),\n    __param(4, Inject(Renderer2)),\n    __param(5, Inject(NgZone)),\n    __param(6, Inject(QUILL_CONFIG_TOKEN))\n], QuillEditorComponent);\n\nlet QuillViewHTMLComponent = class QuillViewHTMLComponent {\n    constructor(sanitizer, config) {\n        this.sanitizer = sanitizer;\n        this.config = config;\n        this.innerHTML = '';\n        this.themeClass = 'ql-snow';\n        this.content = '';\n    }\n    ngOnChanges(changes) {\n        if (changes.theme) {\n            const theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow');\n            this.themeClass = `ql-${theme} ngx-quill-view-html`;\n        }\n        else if (!this.theme) {\n            const theme = this.config.theme ? this.config.theme : 'snow';\n            this.themeClass = `ql-${theme} ngx-quill-view-html`;\n        }\n        if (changes.content) {\n            this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);\n        }\n    }\n};\nQuillViewHTMLComponent.ctorParameters = () => [\n    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }\n];\n__decorate([\n    Input()\n], QuillViewHTMLComponent.prototype, \"content\", void 0);\n__decorate([\n    Input()\n], QuillViewHTMLComponent.prototype, \"theme\", void 0);\nQuillViewHTMLComponent = __decorate([\n    Component({\n        encapsulation: ViewEncapsulation.None,\n        selector: 'quill-view-html',\n        template: `\n  <div class=\"ql-container\" [ngClass]=\"themeClass\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML\">\n    </div>\n  </div>\n`,\n        styles: [`\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n`]\n    }),\n    __param(0, Inject(DomSanitizer)),\n    __param(1, Inject(QUILL_CONFIG_TOKEN))\n], QuillViewHTMLComponent);\n\nlet Quill$1 = null;\nlet QuillViewComponent = class QuillViewComponent {\n    constructor(platformId, config, renderer, elementRef) {\n        this.platformId = platformId;\n        this.config = config;\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.strict = true;\n        this.customOptions = [];\n        this.preserveWhitespace = false;\n        this.valueSetter = (quillEditor, value) => {\n            const format = getFormat(this.format, this.config.format);\n            let content = value;\n            if (format === 'html' || format === 'text') {\n                content = quillEditor.clipboard.convert(value);\n            }\n            else if (format === 'json') {\n                try {\n                    content = JSON.parse(value);\n                }\n                catch (e) {\n                    content = [{ insert: value }];\n                }\n            }\n            quillEditor.setContents(content);\n        };\n    }\n    ngOnChanges(changes) {\n        if (!this.quillEditor) {\n            return;\n        }\n        if (changes.content) {\n            this.valueSetter(this.quillEditor, changes.content.currentValue);\n        }\n    }\n    ngAfterViewInit() {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        if (!Quill$1) {\n            Quill$1 = require('quill');\n        }\n        const modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));\n        modules.toolbar = false;\n        this.customOptions.forEach((customOption) => {\n            const newCustomOption = Quill$1.import(customOption.import);\n            newCustomOption.whitelist = customOption.whitelist;\n            Quill$1.register(newCustomOption, true);\n        });\n        let debug = this.debug;\n        if (!debug && debug !== false && this.config.debug) {\n            debug = this.config.debug;\n        }\n        let formats = this.formats;\n        if (!formats && formats === undefined) {\n            formats = this.config.formats ? Object.assign({}, this.config.formats) : (this.config.formats === null ? null : undefined);\n        }\n        const theme = this.theme || (this.config.theme ? this.config.theme : 'snow');\n        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\n        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n        this.quillEditor = new Quill$1(this.editorElem, {\n            debug,\n            formats,\n            modules,\n            readOnly: true,\n            strict: this.strict,\n            theme\n        });\n        this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n        if (this.content) {\n            this.valueSetter(this.quillEditor, this.content);\n        }\n    }\n};\nQuillViewComponent.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }\n];\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"format\", void 0);\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"modules\", void 0);\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"debug\", void 0);\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"formats\", void 0);\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"strict\", void 0);\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"content\", void 0);\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"customOptions\", void 0);\n__decorate([\n    Input()\n], QuillViewComponent.prototype, \"preserveWhitespace\", void 0);\nQuillViewComponent = __decorate([\n    Component({\n        encapsulation: ViewEncapsulation.None,\n        selector: 'quill-view',\n        template: `\n`,\n        styles: [`\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n`]\n    }),\n    __param(0, Inject(PLATFORM_ID)),\n    __param(1, Inject(QUILL_CONFIG_TOKEN)),\n    __param(2, Inject(Renderer2)),\n    __param(3, Inject(ElementRef))\n], QuillViewComponent);\n\nvar QuillModule_1;\nlet QuillModule = QuillModule_1 = class QuillModule {\n    static forRoot(config) {\n        return {\n            ngModule: QuillModule_1,\n            providers: [\n                {\n                    provide: QUILL_CONFIG_TOKEN,\n                    useValue: config || { modules: defaultModules }\n                }\n            ]\n        };\n    }\n};\nQuillModule = QuillModule_1 = __decorate([\n    NgModule({\n        declarations: [\n            QuillEditorComponent,\n            QuillViewComponent,\n            QuillViewHTMLComponent\n        ],\n        exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n        imports: [CommonModule],\n        providers: []\n    })\n], QuillModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QUILL_CONFIG_TOKEN, QuillEditorComponent, QuillModule, QuillViewComponent, QuillViewHTMLComponent, defaultModules };\n"]}