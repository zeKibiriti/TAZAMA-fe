{"version":3,"sources":["D:/PROJECTS/TAZAMA/oprt-fe/node_modules/@swimlane/ngx-datatable/fesm2015/swimlane-ngx-datatable.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BC,4GAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BD,+GAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,2HAGC;;;;;;;;;;;;;;;;;;;;;;CAoBD,oKAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8FD,2CAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4JD,sVAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqKD,iIAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmOD,2EAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwKD,+MAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiID,gDAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmED,oigBD,gKAGC;;;;;;;;;;;;;;;;;;;;;;;CAqBD,0JAGC;;;;;;;;;;;;;;;;;;;;;;;CAqBD,0JAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmDD,+zBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmHD,8KAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+DD,6HAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoCD,oUAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0lCD,4HAwweD,uEAwy/CD,iwJAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmFuwiBxD,oGAgCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0ED,qKA8CC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmKD,8EA4CC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BD;;;;;;;;;;;;;;0BAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuQD,kJA8BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkJD,oHAiCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkgeD,oGA6CC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyVD,gDASC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkJD,kFAqBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAkDC","file":"swimlane-ngx-datatable.js","sourcesContent":["import { Injectable, Inject, Directive, TemplateRef, EventEmitter, ElementRef, NgZone, HostBinding, Output, Input, Renderer2, HostListener, KeyValueDiffers, ContentChildren, Component, ChangeDetectionStrategy, ContentChild, ChangeDetectorRef, ViewChild, ViewEncapsulation, SkipSelf, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, fromEvent, BehaviorSubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { __decorate, __metadata } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\nclass ScrollbarHelper {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        this.document = document;\n        this.width = this.getWidth();\n    }\n    /**\n     * @return {?}\n     */\n    getWidth() {\n        /** @type {?} */\n        const outer = this.document.createElement('div');\n        outer.style.visibility = 'hidden';\n        outer.style.width = '100px';\n        outer.style.msOverflowStyle = 'scrollbar';\n        this.document.body.appendChild(outer);\n        /** @type {?} */\n        const widthNoScroll = outer.offsetWidth;\n        outer.style.overflow = 'scroll';\n        /** @type {?} */\n        const inner = this.document.createElement('div');\n        inner.style.width = '100%';\n        outer.appendChild(inner);\n        /** @type {?} */\n        const widthWithScroll = inner.offsetWidth;\n        outer.parentNode.removeChild(outer);\n        return widthNoScroll - widthWithScroll;\n    }\n}\nScrollbarHelper.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nScrollbarHelper.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /** @type {?} */\n    ScrollbarHelper.prototype.width;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollbarHelper.prototype.document;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\nclass DimensionsHelper {\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    getDimensions(element) {\n        return element.getBoundingClientRect();\n    }\n}\nDimensionsHelper.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * service to make DatatableComponent aware of changes to\n * input bindings of DataTableColumnDirective\n */\nclass ColumnChangesService {\n    constructor() {\n        this.columnInputChanges = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    get columnInputChanges$() {\n        return this.columnInputChanges.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n    onInputChange() {\n        this.columnInputChanges.next();\n    }\n}\nColumnChangesService.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ColumnChangesService.prototype.columnInputChanges;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableFooterTemplateDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableFooterTemplateDirective.decorators = [\n    { type: Directive, args: [{ selector: '[ngx-datatable-footer-template]' },] }\n];\n/** @nocollapse */\nDataTableFooterTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DataTableFooterTemplateDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Visibility Observer Directive\n *\n * Usage:\n *\n * \t\t<div\n * \t\t\tvisibilityObserver\n * \t\t\t(visible)=\"onVisible($event)\">\n * \t\t</div>\n *\n */\nclass VisibilityDirective {\n    /**\n     * @param {?} element\n     * @param {?} zone\n     */\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.isVisible = false;\n        this.visible = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.runCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        clearTimeout(this.timeout);\n    }\n    /**\n     * @return {?}\n     */\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run((/**\n         * @return {?}\n         */\n        () => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    runCheck() {\n        /** @type {?} */\n        const check = (/**\n         * @return {?}\n         */\n        () => {\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular((/**\n                 * @return {?}\n                 */\n                () => {\n                    this.timeout = setTimeout((/**\n                     * @return {?}\n                     */\n                    () => check()), 50);\n                }));\n            }\n        });\n        this.timeout = setTimeout((/**\n         * @return {?}\n         */\n        () => check()));\n    }\n}\nVisibilityDirective.decorators = [\n    { type: Directive, args: [{ selector: '[visibilityObserver]' },] }\n];\n/** @nocollapse */\nVisibilityDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nVisibilityDirective.propDecorators = {\n    isVisible: [{ type: HostBinding, args: ['class.visible',] }],\n    visible: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    VisibilityDirective.prototype.isVisible;\n    /** @type {?} */\n    VisibilityDirective.prototype.visible;\n    /** @type {?} */\n    VisibilityDirective.prototype.timeout;\n    /**\n     * @type {?}\n     * @private\n     */\n    VisibilityDirective.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    VisibilityDirective.prototype.zone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Draggable Directive for Angular2\n *\n * Inspiration:\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\n *\n */\nclass DraggableDirective {\n    /**\n     * @param {?} element\n     */\n    constructor(element) {\n        this.dragX = true;\n        this.dragY = true;\n        this.dragStart = new EventEmitter();\n        this.dragging = new EventEmitter();\n        this.dragEnd = new EventEmitter();\n        this.isDragging = false;\n        this.element = element.nativeElement;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n            this.onMousedown(changes['dragEventTarget'].currentValue);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMouseup(event) {\n        if (!this.isDragging)\n            return;\n        this.isDragging = false;\n        this.element.classList.remove('dragging');\n        if (this.subscription) {\n            this._destroySubscription();\n            this.dragEnd.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMousedown(event) {\n        // we only want to drag the inner header text\n        /** @type {?} */\n        const isDragElm = ((/** @type {?} */ (event.target))).classList.contains('draggable');\n        if (isDragElm && (this.dragX || this.dragY)) {\n            event.preventDefault();\n            this.isDragging = true;\n            /** @type {?} */\n            const mouseDownPos = { x: event.clientX, y: event.clientY };\n            /** @type {?} */\n            const mouseup = fromEvent(document, 'mouseup');\n            this.subscription = mouseup.subscribe((/**\n             * @param {?} ev\n             * @return {?}\n             */\n            (ev) => this.onMouseup(ev)));\n            /** @type {?} */\n            const mouseMoveSub = fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((/**\n             * @param {?} ev\n             * @return {?}\n             */\n            (ev) => this.move(ev, mouseDownPos)));\n            this.subscription.add(mouseMoveSub);\n            this.dragStart.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @param {?} mouseDownPos\n     * @return {?}\n     */\n    move(event, mouseDownPos) {\n        if (!this.isDragging)\n            return;\n        /** @type {?} */\n        const x = event.clientX - mouseDownPos.x;\n        /** @type {?} */\n        const y = event.clientY - mouseDownPos.y;\n        if (this.dragX)\n            this.element.style.left = `${x}px`;\n        if (this.dragY)\n            this.element.style.top = `${y}px`;\n        this.element.classList.add('dragging');\n        this.dragging.emit({\n            event,\n            element: this.element,\n            model: this.dragModel\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nDraggableDirective.decorators = [\n    { type: Directive, args: [{ selector: '[draggable]' },] }\n];\n/** @nocollapse */\nDraggableDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nDraggableDirective.propDecorators = {\n    dragEventTarget: [{ type: Input }],\n    dragModel: [{ type: Input }],\n    dragX: [{ type: Input }],\n    dragY: [{ type: Input }],\n    dragStart: [{ type: Output }],\n    dragging: [{ type: Output }],\n    dragEnd: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    DraggableDirective.prototype.dragEventTarget;\n    /** @type {?} */\n    DraggableDirective.prototype.dragModel;\n    /** @type {?} */\n    DraggableDirective.prototype.dragX;\n    /** @type {?} */\n    DraggableDirective.prototype.dragY;\n    /** @type {?} */\n    DraggableDirective.prototype.dragStart;\n    /** @type {?} */\n    DraggableDirective.prototype.dragging;\n    /** @type {?} */\n    DraggableDirective.prototype.dragEnd;\n    /** @type {?} */\n    DraggableDirective.prototype.element;\n    /** @type {?} */\n    DraggableDirective.prototype.isDragging;\n    /** @type {?} */\n    DraggableDirective.prototype.subscription;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable */\n/** @type {?} */\nconst MouseEvent = (/** @type {?} */ ((((/** @type {?} */ ((typeof window !== 'undefined' && window)))) || ((/** @type {?} */ (global))))\n    .MouseEvent));\n/** @type {?} */\nconst KeyboardEvent = (/** @type {?} */ ((((/** @type {?} */ ((typeof window !== 'undefined' && window)))) || ((/** @type {?} */ (global))))\n    .KeyboardEvent));\n/** @type {?} */\nconst Event = (/** @type {?} */ ((((/** @type {?} */ ((typeof window !== 'undefined' && window)))) || ((/** @type {?} */ (global)))).Event));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ResizeableDirective {\n    /**\n     * @param {?} element\n     * @param {?} renderer\n     */\n    constructor(element, renderer) {\n        this.renderer = renderer;\n        this.resizeEnabled = true;\n        this.resize = new EventEmitter();\n        this.resizing = false;\n        this.element = element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        /** @type {?} */\n        const renderer2 = this.renderer;\n        this.resizeHandle = renderer2.createElement('span');\n        if (this.resizeEnabled) {\n            renderer2.addClass(this.resizeHandle, 'resize-handle');\n        }\n        else {\n            renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\n        }\n        renderer2.appendChild(this.element, this.resizeHandle);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubscription();\n        if (this.renderer.destroyNode) {\n            this.renderer.destroyNode(this.resizeHandle);\n        }\n        else {\n            this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onMouseup() {\n        this.resizing = false;\n        if (this.subscription && !this.subscription.closed) {\n            this._destroySubscription();\n            this.resize.emit(this.element.clientWidth);\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMousedown(event) {\n        /** @type {?} */\n        const isHandle = ((/** @type {?} */ (event.target))).classList.contains('resize-handle');\n        /** @type {?} */\n        const initialWidth = this.element.clientWidth;\n        /** @type {?} */\n        const mouseDownScreenX = event.screenX;\n        if (isHandle) {\n            event.stopPropagation();\n            this.resizing = true;\n            /** @type {?} */\n            const mouseup = fromEvent(document, 'mouseup');\n            this.subscription = mouseup.subscribe((/**\n             * @param {?} ev\n             * @return {?}\n             */\n            (ev) => this.onMouseup()));\n            /** @type {?} */\n            const mouseMoveSub = fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => this.move(e, initialWidth, mouseDownScreenX)));\n            this.subscription.add(mouseMoveSub);\n        }\n    }\n    /**\n     * @param {?} event\n     * @param {?} initialWidth\n     * @param {?} mouseDownScreenX\n     * @return {?}\n     */\n    move(event, initialWidth, mouseDownScreenX) {\n        /** @type {?} */\n        const movementX = event.screenX - mouseDownScreenX;\n        /** @type {?} */\n        const newWidth = initialWidth + movementX;\n        /** @type {?} */\n        const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n        /** @type {?} */\n        const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n        if (overMinWidth && underMaxWidth) {\n            this.element.style.width = `${newWidth}px`;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nResizeableDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[resizeable]',\n                host: {\n                    '[class.resizeable]': 'resizeEnabled'\n                }\n            },] }\n];\n/** @nocollapse */\nResizeableDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nResizeableDirective.propDecorators = {\n    resizeEnabled: [{ type: Input }],\n    minWidth: [{ type: Input }],\n    maxWidth: [{ type: Input }],\n    resize: [{ type: Output }],\n    onMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    ResizeableDirective.prototype.resizeEnabled;\n    /** @type {?} */\n    ResizeableDirective.prototype.minWidth;\n    /** @type {?} */\n    ResizeableDirective.prototype.maxWidth;\n    /** @type {?} */\n    ResizeableDirective.prototype.resize;\n    /** @type {?} */\n    ResizeableDirective.prototype.element;\n    /** @type {?} */\n    ResizeableDirective.prototype.subscription;\n    /** @type {?} */\n    ResizeableDirective.prototype.resizing;\n    /**\n     * @type {?}\n     * @private\n     */\n    ResizeableDirective.prototype.resizeHandle;\n    /**\n     * @type {?}\n     * @private\n     */\n    ResizeableDirective.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OrderableDirective {\n    /**\n     * @param {?} differs\n     * @param {?} document\n     */\n    constructor(differs, document) {\n        this.document = document;\n        this.reorder = new EventEmitter();\n        this.targetChanged = new EventEmitter();\n        this.differ = differs.find({}).create();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // HACK: Investigate Better Way\n        this.updateSubscriptions();\n        this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.draggables.forEach((/**\n         * @param {?} d\n         * @return {?}\n         */\n        d => {\n            d.dragStart.unsubscribe();\n            d.dragging.unsubscribe();\n            d.dragEnd.unsubscribe();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    updateSubscriptions() {\n        /** @type {?} */\n        const diffs = this.differ.diff(this.createMapDiffs());\n        if (diffs) {\n            /** @type {?} */\n            const subscribe = (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ currentValue, previousValue }) => {\n                unsubscribe({ previousValue });\n                if (currentValue) {\n                    currentValue.dragStart.subscribe(this.onDragStart.bind(this));\n                    currentValue.dragging.subscribe(this.onDragging.bind(this));\n                    currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\n                }\n            });\n            /** @type {?} */\n            const unsubscribe = (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ previousValue }) => {\n                if (previousValue) {\n                    previousValue.dragStart.unsubscribe();\n                    previousValue.dragging.unsubscribe();\n                    previousValue.dragEnd.unsubscribe();\n                }\n            });\n            diffs.forEachAddedItem(subscribe);\n            // diffs.forEachChangedItem(subscribe.bind(this));\n            diffs.forEachRemovedItem(unsubscribe);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onDragStart() {\n        this.positions = {};\n        /** @type {?} */\n        let i = 0;\n        for (const dragger of this.draggables.toArray()) {\n            /** @type {?} */\n            const elm = dragger.element;\n            /** @type {?} */\n            const left = parseInt(elm.offsetLeft.toString(), 0);\n            this.positions[dragger.dragModel.prop] = {\n                left,\n                right: left + parseInt(elm.offsetWidth.toString(), 0),\n                index: i++,\n                element: elm\n            };\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onDragging({ element, model, event }) {\n        /** @type {?} */\n        const prevPos = this.positions[model.prop];\n        /** @type {?} */\n        const target = this.isTarget(model, event);\n        if (target) {\n            if (this.lastDraggingIndex !== target.i) {\n                this.targetChanged.emit({\n                    prevIndex: this.lastDraggingIndex,\n                    newIndex: target.i,\n                    initialIndex: prevPos.index\n                });\n                this.lastDraggingIndex = target.i;\n            }\n        }\n        else if (this.lastDraggingIndex !== prevPos.index) {\n            this.targetChanged.emit({\n                prevIndex: this.lastDraggingIndex,\n                initialIndex: prevPos.index\n            });\n            this.lastDraggingIndex = prevPos.index;\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onDragEnd({ element, model, event }) {\n        /** @type {?} */\n        const prevPos = this.positions[model.prop];\n        /** @type {?} */\n        const target = this.isTarget(model, event);\n        if (target) {\n            this.reorder.emit({\n                prevIndex: prevPos.index,\n                newIndex: target.i,\n                model\n            });\n        }\n        this.lastDraggingIndex = undefined;\n        element.style.left = 'auto';\n    }\n    /**\n     * @param {?} model\n     * @param {?} event\n     * @return {?}\n     */\n    isTarget(model, event) {\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        const x = event.x || event.clientX;\n        /** @type {?} */\n        const y = event.y || event.clientY;\n        /** @type {?} */\n        const targets = this.document.elementsFromPoint(x, y);\n        for (const prop in this.positions) {\n            // current column position which throws event.\n            /** @type {?} */\n            const pos = this.positions[prop];\n            // since we drag the inner span, we need to find it in the elements at the cursor\n            if (model.prop !== prop && targets.find((/**\n             * @param {?} el\n             * @return {?}\n             */\n            (el) => el === pos.element))) {\n                return {\n                    pos,\n                    i\n                };\n            }\n            i++;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createMapDiffs() {\n        return this.draggables.toArray().reduce((/**\n         * @param {?} acc\n         * @param {?} curr\n         * @return {?}\n         */\n        (acc, curr) => {\n            acc[curr.dragModel.$$id] = curr;\n            return acc;\n        }), {});\n    }\n}\nOrderableDirective.decorators = [\n    { type: Directive, args: [{ selector: '[orderable]' },] }\n];\n/** @nocollapse */\nOrderableDirective.ctorParameters = () => [\n    { type: KeyValueDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nOrderableDirective.propDecorators = {\n    reorder: [{ type: Output }],\n    targetChanged: [{ type: Output }],\n    draggables: [{ type: ContentChildren, args: [DraggableDirective, { descendants: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    OrderableDirective.prototype.reorder;\n    /** @type {?} */\n    OrderableDirective.prototype.targetChanged;\n    /** @type {?} */\n    OrderableDirective.prototype.draggables;\n    /** @type {?} */\n    OrderableDirective.prototype.positions;\n    /** @type {?} */\n    OrderableDirective.prototype.differ;\n    /** @type {?} */\n    OrderableDirective.prototype.lastDraggingIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    OrderableDirective.prototype.document;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LongPressDirective {\n    constructor() {\n        this.pressEnabled = true;\n        this.duration = 500;\n        this.longPressStart = new EventEmitter();\n        this.longPressing = new EventEmitter();\n        this.longPressEnd = new EventEmitter();\n        this.mouseX = 0;\n        this.mouseY = 0;\n    }\n    /**\n     * @return {?}\n     */\n    get press() {\n        return this.pressing;\n    }\n    /**\n     * @return {?}\n     */\n    get isLongPress() {\n        return this.isLongPressing;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMouseDown(event) {\n        // don't do right/middle clicks\n        if (event.which !== 1 || !this.pressEnabled)\n            return;\n        // don't start drag if its on resize handle\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        if (target.classList.contains('resize-handle'))\n            return;\n        this.mouseX = event.clientX;\n        this.mouseY = event.clientY;\n        this.pressing = true;\n        this.isLongPressing = false;\n        /** @type {?} */\n        const mouseup = fromEvent(document, 'mouseup');\n        this.subscription = mouseup.subscribe((/**\n         * @param {?} ev\n         * @return {?}\n         */\n        (ev) => this.onMouseup()));\n        this.timeout = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.isLongPressing = true;\n            this.longPressStart.emit({\n                event,\n                model: this.pressModel\n            });\n            this.subscription.add(fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((/**\n             * @param {?} mouseEvent\n             * @return {?}\n             */\n            (mouseEvent) => this.onMouseMove(mouseEvent))));\n            this.loop(event);\n        }), this.duration);\n        this.loop(event);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMouseMove(event) {\n        if (this.pressing && !this.isLongPressing) {\n            /** @type {?} */\n            const xThres = Math.abs(event.clientX - this.mouseX) > 10;\n            /** @type {?} */\n            const yThres = Math.abs(event.clientY - this.mouseY) > 10;\n            if (xThres || yThres) {\n                this.endPress();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    loop(event) {\n        if (this.isLongPressing) {\n            this.timeout = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this.longPressing.emit({\n                    event,\n                    model: this.pressModel\n                });\n                this.loop(event);\n            }), 50);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    endPress() {\n        clearTimeout(this.timeout);\n        this.isLongPressing = false;\n        this.pressing = false;\n        this._destroySubscription();\n        this.longPressEnd.emit({\n            model: this.pressModel\n        });\n    }\n    /**\n     * @return {?}\n     */\n    onMouseup() {\n        this.endPress();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nLongPressDirective.decorators = [\n    { type: Directive, args: [{ selector: '[long-press]' },] }\n];\nLongPressDirective.propDecorators = {\n    pressEnabled: [{ type: Input }],\n    pressModel: [{ type: Input }],\n    duration: [{ type: Input }],\n    longPressStart: [{ type: Output }],\n    longPressing: [{ type: Output }],\n    longPressEnd: [{ type: Output }],\n    press: [{ type: HostBinding, args: ['class.press',] }],\n    isLongPress: [{ type: HostBinding, args: ['class.longpress',] }],\n    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    LongPressDirective.prototype.pressEnabled;\n    /** @type {?} */\n    LongPressDirective.prototype.pressModel;\n    /** @type {?} */\n    LongPressDirective.prototype.duration;\n    /** @type {?} */\n    LongPressDirective.prototype.longPressStart;\n    /** @type {?} */\n    LongPressDirective.prototype.longPressing;\n    /** @type {?} */\n    LongPressDirective.prototype.longPressEnd;\n    /** @type {?} */\n    LongPressDirective.prototype.pressing;\n    /** @type {?} */\n    LongPressDirective.prototype.isLongPressing;\n    /** @type {?} */\n    LongPressDirective.prototype.timeout;\n    /** @type {?} */\n    LongPressDirective.prototype.mouseX;\n    /** @type {?} */\n    LongPressDirective.prototype.mouseY;\n    /** @type {?} */\n    LongPressDirective.prototype.subscription;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollerComponent {\n    /**\n     * @param {?} ngZone\n     * @param {?} element\n     * @param {?} renderer\n     */\n    constructor(ngZone, element, renderer) {\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.scrollbarV = false;\n        this.scrollbarH = false;\n        this.scroll = new EventEmitter();\n        this.scrollYPos = 0;\n        this.scrollXPos = 0;\n        this.prevScrollYPos = 0;\n        this.prevScrollXPos = 0;\n        this._scrollEventListener = null;\n        this.element = element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // manual bind so we don't always listen\n        if (this.scrollbarV || this.scrollbarH) {\n            /** @type {?} */\n            const renderer = this.renderer;\n            this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\n            this._scrollEventListener = this.onScrolled.bind(this);\n            this.parentElement.addEventListener('scroll', this._scrollEventListener);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._scrollEventListener) {\n            this.parentElement.removeEventListener('scroll', this._scrollEventListener);\n            this._scrollEventListener = null;\n        }\n    }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    setOffset(offsetY) {\n        if (this.parentElement) {\n            this.parentElement.scrollTop = offsetY;\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onScrolled(event) {\n        /** @type {?} */\n        const dom = (/** @type {?} */ (event.currentTarget));\n        requestAnimationFrame((/**\n         * @return {?}\n         */\n        () => {\n            this.scrollYPos = dom.scrollTop;\n            this.scrollXPos = dom.scrollLeft;\n            this.updateOffset();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    updateOffset() {\n        /** @type {?} */\n        let direction;\n        if (this.scrollYPos < this.prevScrollYPos) {\n            direction = 'down';\n        }\n        else if (this.scrollYPos > this.prevScrollYPos) {\n            direction = 'up';\n        }\n        this.scroll.emit({\n            direction,\n            scrollYPos: this.scrollYPos,\n            scrollXPos: this.scrollXPos\n        });\n        this.prevScrollYPos = this.scrollYPos;\n        this.prevScrollXPos = this.scrollXPos;\n    }\n}\nScrollerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-scroller',\n                template: `\n    <ng-content></ng-content>\n  `,\n                host: {\n                    class: 'datatable-scroll'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nScrollerComponent.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nScrollerComponent.propDecorators = {\n    scrollbarV: [{ type: Input }],\n    scrollbarH: [{ type: Input }],\n    scrollHeight: [{ type: HostBinding, args: ['style.height.px',] }, { type: Input }],\n    scrollWidth: [{ type: HostBinding, args: ['style.width.px',] }, { type: Input }],\n    scroll: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollbarV;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollbarH;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollHeight;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollWidth;\n    /** @type {?} */\n    ScrollerComponent.prototype.scroll;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollYPos;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollXPos;\n    /** @type {?} */\n    ScrollerComponent.prototype.prevScrollYPos;\n    /** @type {?} */\n    ScrollerComponent.prototype.prevScrollXPos;\n    /** @type {?} */\n    ScrollerComponent.prototype.element;\n    /** @type {?} */\n    ScrollerComponent.prototype.parentElement;\n    /** @type {?} */\n    ScrollerComponent.prototype.onScrollListener;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollerComponent.prototype._scrollEventListener;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollerComponent.prototype.ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollerComponent.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableGroupHeaderTemplateDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDatatableGroupHeaderTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngx-datatable-group-header-template]'\n            },] }\n];\n/** @nocollapse */\nDatatableGroupHeaderTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DatatableGroupHeaderTemplateDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableGroupHeaderDirective {\n    constructor() {\n        /**\n         * Row height is required when virtual scroll is enabled.\n         */\n        this.rowHeight = 0;\n        /**\n         * Track toggling of group visibility\n         */\n        this.toggle = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n    /**\n     * Toggle the expansion of a group\n     * @param {?} group\n     * @return {?}\n     */\n    toggleExpandGroup(group) {\n        this.toggle.emit({\n            type: 'group',\n            value: group\n        });\n    }\n    /**\n     * Expand all groups\n     * @return {?}\n     */\n    expandAllGroups() {\n        this.toggle.emit({\n            type: 'all',\n            value: true\n        });\n    }\n    /**\n     * Collapse all groups\n     * @return {?}\n     */\n    collapseAllGroups() {\n        this.toggle.emit({\n            type: 'all',\n            value: false\n        });\n    }\n}\nDatatableGroupHeaderDirective.decorators = [\n    { type: Directive, args: [{ selector: 'ngx-datatable-group-header' },] }\n];\nDatatableGroupHeaderDirective.propDecorators = {\n    rowHeight: [{ type: Input }],\n    _templateInput: [{ type: Input, args: ['template',] }],\n    _templateQuery: [{ type: ContentChild, args: [DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true },] }],\n    toggle: [{ type: Output }]\n};\nif (false) {\n    /**\n     * Row height is required when virtual scroll is enabled.\n     * @type {?}\n     */\n    DatatableGroupHeaderDirective.prototype.rowHeight;\n    /** @type {?} */\n    DatatableGroupHeaderDirective.prototype._templateInput;\n    /** @type {?} */\n    DatatableGroupHeaderDirective.prototype._templateQuery;\n    /**\n     * Track toggling of group visibility\n     * @type {?}\n     */\n    DatatableGroupHeaderDirective.prototype.toggle;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Always returns the empty string ''\n * @return {?}\n */\nfunction emptyStringGetter() {\n    return '';\n}\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n * @param {?} prop\n * @return {?}\n */\nfunction getterForProp(prop) {\n    if (prop == null) {\n        return emptyStringGetter;\n    }\n    if (typeof prop === 'number') {\n        return numericIndexGetter;\n    }\n    else {\n        // deep or simple\n        if (prop.indexOf('.') !== -1) {\n            return deepValueGetter;\n        }\n        else {\n            return shallowValueGetter;\n        }\n    }\n}\n/**\n * Returns the value at this numeric index.\n * @param {?} row array of values\n * @param {?} index numeric index\n * @return {?} any or '' if invalid index\n */\nfunction numericIndexGetter(row, index) {\n    if (row == null) {\n        return '';\n    }\n    // mimic behavior of deepValueGetter\n    if (!row || index == null) {\n        return row;\n    }\n    /** @type {?} */\n    const value = row[index];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param {?} obj object containing the field\n * @param {?} fieldName field name string\n * @return {?}\n */\nfunction shallowValueGetter(obj, fieldName) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !fieldName) {\n        return obj;\n    }\n    /** @type {?} */\n    const value = obj[fieldName];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns a deep object given a string. zoo['animal.type']\n * @param {?} obj\n * @param {?} path\n * @return {?}\n */\nfunction deepValueGetter(obj, path) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !path) {\n        return obj;\n    }\n    // check if path matches a root-level field\n    // { \"a.b.c\": 123 }\n    /** @type {?} */\n    let current = obj[path];\n    if (current !== undefined) {\n        return current;\n    }\n    current = obj;\n    /** @type {?} */\n    const split = path.split('.');\n    if (split.length) {\n        for (let i = 0; i < split.length; i++) {\n            current = current[split[i]];\n            // if found undefined, return empty string\n            if (current === undefined || current === null) {\n                return '';\n            }\n        }\n    }\n    return current;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction optionalGetterForProp(prop) {\n    return prop && ((/**\n     * @param {?} row\n     * @return {?}\n     */\n    row => getterForProp(prop)(row, prop)));\n}\n/**\n * This functions rearrange items by their parents\n * Also sets the level value to each of the items\n *\n * Note: Expecting each item has a property called parentId\n * Note: This algorithm will fail if a list has two or more items with same ID\n * NOTE: This algorithm will fail if there is a deadlock of relationship\n *\n * For example,\n *\n * Input\n *\n * id -> parent\n * 1  -> 0\n * 2  -> 0\n * 3  -> 1\n * 4  -> 1\n * 5  -> 2\n * 7  -> 8\n * 6  -> 3\n *\n *\n * Output\n * id -> level\n * 1      -> 0\n * --3    -> 1\n * ----6  -> 2\n * --4    -> 1\n * 2      -> 0\n * --5    -> 1\n * 7     -> 8\n *\n *\n * @param {?} rows\n *\n * @param {?=} from\n * @param {?=} to\n * @return {?}\n */\nfunction groupRowsByParents(rows, from, to) {\n    if (from && to) {\n        /** @type {?} */\n        const nodeById = {};\n        /** @type {?} */\n        const l = rows.length;\n        /** @type {?} */\n        let node = null;\n        nodeById[0] = new TreeNode(); // that's the root node\n        // that's the root node\n        /** @type {?} */\n        const uniqIDs = rows.reduce((/**\n         * @param {?} arr\n         * @param {?} item\n         * @return {?}\n         */\n        (arr, item) => {\n            /** @type {?} */\n            const toValue = to(item);\n            if (arr.indexOf(toValue) === -1) {\n                arr.push(toValue);\n            }\n            return arr;\n        }), []);\n        for (let i = 0; i < l; i++) {\n            // make TreeNode objects for each item\n            nodeById[to(rows[i])] = new TreeNode(rows[i]);\n        }\n        for (let i = 0; i < l; i++) {\n            // link all TreeNode objects\n            node = nodeById[to(rows[i])];\n            /** @type {?} */\n            let parent = 0;\n            /** @type {?} */\n            const fromValue = from(node.row);\n            if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\n                parent = fromValue;\n            }\n            node.parent = nodeById[parent];\n            node.row['level'] = node.parent.row['level'] + 1;\n            node.parent.children.push(node);\n        }\n        /** @type {?} */\n        let resolvedRows = [];\n        nodeById[0].flatten((/**\n         * @return {?}\n         */\n        function () {\n            resolvedRows = [...resolvedRows, this.row];\n        }), true);\n        return resolvedRows;\n    }\n    else {\n        return rows;\n    }\n}\nclass TreeNode {\n    /**\n     * @param {?=} row\n     */\n    constructor(row = null) {\n        if (!row) {\n            row = {\n                level: -1,\n                treeStatus: 'expanded'\n            };\n        }\n        this.row = row;\n        this.parent = null;\n        this.children = [];\n    }\n    /**\n     * @param {?} f\n     * @param {?} recursive\n     * @return {?}\n     */\n    flatten(f, recursive) {\n        if (this.row['treeStatus'] === 'expanded') {\n            for (let i = 0, l = this.children.length; i < l; i++) {\n                /** @type {?} */\n                const child = this.children[i];\n                f.apply(child, Array.prototype.slice.call(arguments, 2));\n                if (recursive)\n                    child.flatten.apply(child, arguments);\n            }\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    TreeNode.prototype.row;\n    /** @type {?} */\n    TreeNode.prototype.parent;\n    /** @type {?} */\n    TreeNode.prototype.children;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Converts strings from something to camel case\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\n * @param {?} str\n * @return {?}\n */\nfunction camelCase(str) {\n    // Replace special characters with a space\n    str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\n    // put a space before an uppercase letter\n    str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n    // Lower case first character and some other stuff\n    str = str\n        .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\n        .trim()\n        .toLowerCase();\n    // uppercase characters preceded by a space or number\n    str = str.replace(/([ 0-9]+)([a-zA-Z])/g, (/**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @return {?}\n     */\n    function (a, b, c) {\n        return b.trim() + c.toUpperCase();\n    }));\n    return str;\n}\n/**\n * Converts strings from camel case to words\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\n * @param {?} str\n * @return {?}\n */\nfunction deCamelCase(str) {\n    return str.replace(/([A-Z])/g, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    match => ` ${match}`)).replace(/^./, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    match => match.toUpperCase()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a unique object id.\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n * @return {?}\n */\nfunction id() {\n    return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sets the column defaults\n * @param {?} columns\n * @return {?}\n */\nfunction setColumnDefaults(columns) {\n    if (!columns)\n        return;\n    // Only one column should hold the tree view\n    // Thus if multiple columns are provided with\n    // isTreeColumn as true we take only the first one\n    /** @type {?} */\n    let treeColumnFound = false;\n    for (const column of columns) {\n        if (!column.$$id) {\n            column.$$id = id();\n        }\n        // prop can be numeric; zero is valid not a missing prop\n        // translate name => prop\n        if (isNullOrUndefined(column.prop) && column.name) {\n            column.prop = camelCase(column.name);\n        }\n        if (!column.$$valueGetter) {\n            column.$$valueGetter = getterForProp(column.prop);\n        }\n        // format props if no name passed\n        if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = deCamelCase(String(column.prop));\n        }\n        if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = ''; // Fixes IE and Edge displaying `null`\n        }\n        if (!column.hasOwnProperty('resizeable')) {\n            column.resizeable = true;\n        }\n        if (!column.hasOwnProperty('sortable')) {\n            column.sortable = true;\n        }\n        if (!column.hasOwnProperty('draggable')) {\n            column.draggable = true;\n        }\n        if (!column.hasOwnProperty('canAutoResize')) {\n            column.canAutoResize = true;\n        }\n        if (!column.hasOwnProperty('width')) {\n            column.width = 150;\n        }\n        if (!column.hasOwnProperty('isTreeColumn')) {\n            column.isTreeColumn = false;\n        }\n        else {\n            if (column.isTreeColumn && !treeColumnFound) {\n                // If the first column with isTreeColumn is true found\n                // we mark that treeCoulmn is found\n                treeColumnFound = true;\n            }\n            else {\n                // After that isTreeColumn property for any other column\n                // will be set as false\n                column.isTreeColumn = false;\n            }\n        }\n    }\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Translates templates definitions to objects\n * @param {?} templates\n * @return {?}\n */\nfunction translateTemplates(templates) {\n    /** @type {?} */\n    const result = [];\n    for (const temp of templates) {\n        /** @type {?} */\n        const col = {};\n        /** @type {?} */\n        const props = Object.getOwnPropertyNames(temp);\n        for (const prop of props) {\n            col[prop] = temp[prop];\n        }\n        if (temp.headerTemplate) {\n            col.headerTemplate = temp.headerTemplate;\n        }\n        if (temp.cellTemplate) {\n            col.cellTemplate = temp.cellTemplate;\n        }\n        if (temp.summaryFunc) {\n            col.summaryFunc = temp.summaryFunc;\n        }\n        if (temp.summaryTemplate) {\n            col.summaryTemplate = temp.summaryTemplate;\n        }\n        result.push(col);\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst ColumnMode = {\n    standard: 'standard',\n    flex: 'flex',\n    force: 'force',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst SelectionType = {\n    single: 'single',\n    multi: 'multi',\n    multiClick: 'multiClick',\n    cell: 'cell',\n    checkbox: 'checkbox',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst SortType = {\n    single: 'single',\n    multi: 'multi',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst ContextmenuType = {\n    header: 'header',\n    body: 'body',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableColumnHeaderDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnHeaderDirective.decorators = [\n    { type: Directive, args: [{ selector: '[ngx-datatable-header-template]' },] }\n];\n/** @nocollapse */\nDataTableColumnHeaderDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DataTableColumnHeaderDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableColumnCellDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnCellDirective.decorators = [\n    { type: Directive, args: [{ selector: '[ngx-datatable-cell-template]' },] }\n];\n/** @nocollapse */\nDataTableColumnCellDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DataTableColumnCellDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableColumnCellTreeToggle {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnCellTreeToggle.decorators = [\n    { type: Directive, args: [{ selector: '[ngx-datatable-tree-toggle]' },] }\n];\n/** @nocollapse */\nDataTableColumnCellTreeToggle.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DataTableColumnCellTreeToggle.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableColumnDirective {\n    /**\n     * @param {?} columnChangesService\n     */\n    constructor(columnChangesService) {\n        this.columnChangesService = columnChangesService;\n        this.isFirstChange = true;\n    }\n    /**\n     * @return {?}\n     */\n    get cellTemplate() {\n        return this._cellTemplateInput || this._cellTemplateQuery;\n    }\n    /**\n     * @return {?}\n     */\n    get headerTemplate() {\n        return this._headerTemplateInput || this._headerTemplateQuery;\n    }\n    /**\n     * @return {?}\n     */\n    get treeToggleTemplate() {\n        return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        if (this.isFirstChange) {\n            this.isFirstChange = false;\n        }\n        else {\n            this.columnChangesService.onInputChange();\n        }\n    }\n}\nDataTableColumnDirective.decorators = [\n    { type: Directive, args: [{ selector: 'ngx-datatable-column' },] }\n];\n/** @nocollapse */\nDataTableColumnDirective.ctorParameters = () => [\n    { type: ColumnChangesService }\n];\nDataTableColumnDirective.propDecorators = {\n    name: [{ type: Input }],\n    prop: [{ type: Input }],\n    frozenLeft: [{ type: Input }],\n    frozenRight: [{ type: Input }],\n    flexGrow: [{ type: Input }],\n    resizeable: [{ type: Input }],\n    comparator: [{ type: Input }],\n    pipe: [{ type: Input }],\n    sortable: [{ type: Input }],\n    draggable: [{ type: Input }],\n    canAutoResize: [{ type: Input }],\n    minWidth: [{ type: Input }],\n    width: [{ type: Input }],\n    maxWidth: [{ type: Input }],\n    checkboxable: [{ type: Input }],\n    headerCheckboxable: [{ type: Input }],\n    headerClass: [{ type: Input }],\n    cellClass: [{ type: Input }],\n    isTreeColumn: [{ type: Input }],\n    treeLevelIndent: [{ type: Input }],\n    summaryFunc: [{ type: Input }],\n    summaryTemplate: [{ type: Input }],\n    _cellTemplateInput: [{ type: Input, args: ['cellTemplate',] }],\n    _cellTemplateQuery: [{ type: ContentChild, args: [DataTableColumnCellDirective, { read: TemplateRef, static: true },] }],\n    _headerTemplateInput: [{ type: Input, args: ['headerTemplate',] }],\n    _headerTemplateQuery: [{ type: ContentChild, args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true },] }],\n    _treeToggleTemplateInput: [{ type: Input, args: ['treeToggleTemplate',] }],\n    _treeToggleTemplateQuery: [{ type: ContentChild, args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableColumnDirective.prototype.name;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.prop;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.frozenLeft;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.frozenRight;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.flexGrow;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.resizeable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.comparator;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.pipe;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.sortable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.draggable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.canAutoResize;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.minWidth;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.width;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.maxWidth;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.checkboxable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.headerCheckboxable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.headerClass;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.cellClass;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.isTreeColumn;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.treeLevelIndent;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.summaryFunc;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.summaryTemplate;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._cellTemplateInput;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._cellTemplateQuery;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._headerTemplateInput;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._headerTemplateQuery;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._treeToggleTemplateInput;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._treeToggleTemplateQuery;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableColumnDirective.prototype.isFirstChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableColumnDirective.prototype.columnChangesService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableRowDetailTemplateDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDatatableRowDetailTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngx-datatable-row-detail-template]'\n            },] }\n];\n/** @nocollapse */\nDatatableRowDetailTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DatatableRowDetailTemplateDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableRowDetailDirective {\n    constructor() {\n        /**\n         * The detail row height is required especially\n         * when virtual scroll is enabled.\n         */\n        this.rowHeight = 0;\n        /**\n         * Row detail row visbility was toggled.\n         */\n        this.toggle = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n    /**\n     * Toggle the expansion of the row\n     * @param {?} row\n     * @return {?}\n     */\n    toggleExpandRow(row) {\n        this.toggle.emit({\n            type: 'row',\n            value: row\n        });\n    }\n    /**\n     * API method to expand all the rows.\n     * @return {?}\n     */\n    expandAllRows() {\n        this.toggle.emit({\n            type: 'all',\n            value: true\n        });\n    }\n    /**\n     * API method to collapse all the rows.\n     * @return {?}\n     */\n    collapseAllRows() {\n        this.toggle.emit({\n            type: 'all',\n            value: false\n        });\n    }\n}\nDatatableRowDetailDirective.decorators = [\n    { type: Directive, args: [{ selector: 'ngx-datatable-row-detail' },] }\n];\nDatatableRowDetailDirective.propDecorators = {\n    rowHeight: [{ type: Input }],\n    _templateInput: [{ type: Input, args: ['template',] }],\n    _templateQuery: [{ type: ContentChild, args: [DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true },] }],\n    toggle: [{ type: Output }]\n};\nif (false) {\n    /**\n     * The detail row height is required especially\n     * when virtual scroll is enabled.\n     * @type {?}\n     */\n    DatatableRowDetailDirective.prototype.rowHeight;\n    /** @type {?} */\n    DatatableRowDetailDirective.prototype._templateInput;\n    /** @type {?} */\n    DatatableRowDetailDirective.prototype._templateQuery;\n    /**\n     * Row detail row visbility was toggled.\n     * @type {?}\n     */\n    DatatableRowDetailDirective.prototype.toggle;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableFooterDirective {\n    /**\n     * @return {?}\n     */\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n}\nDatatableFooterDirective.decorators = [\n    { type: Directive, args: [{ selector: 'ngx-datatable-footer' },] }\n];\nDatatableFooterDirective.propDecorators = {\n    footerHeight: [{ type: Input }],\n    totalMessage: [{ type: Input }],\n    selectedMessage: [{ type: Input }],\n    pagerLeftArrowIcon: [{ type: Input }],\n    pagerRightArrowIcon: [{ type: Input }],\n    pagerPreviousIcon: [{ type: Input }],\n    pagerNextIcon: [{ type: Input }],\n    _templateInput: [{ type: Input, args: ['template',] }],\n    _templateQuery: [{ type: ContentChild, args: [DataTableFooterTemplateDirective, { read: TemplateRef, static: false },] }]\n};\nif (false) {\n    /** @type {?} */\n    DatatableFooterDirective.prototype.footerHeight;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.totalMessage;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.selectedMessage;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.pagerLeftArrowIcon;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.pagerRightArrowIcon;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.pagerPreviousIcon;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.pagerNextIcon;\n    /** @type {?} */\n    DatatableFooterDirective.prototype._templateInput;\n    /** @type {?} */\n    DatatableFooterDirective.prototype._templateQuery;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the columns by pin.\n * @param {?} cols\n * @return {?}\n */\nfunction columnsByPin(cols) {\n    /** @type {?} */\n    const ret = {\n        left: [],\n        center: [],\n        right: []\n    };\n    if (cols) {\n        for (const col of cols) {\n            if (col.frozenLeft) {\n                ret.left.push(col);\n            }\n            else if (col.frozenRight) {\n                ret.right.push(col);\n            }\n            else {\n                ret.center.push(col);\n            }\n        }\n    }\n    return ret;\n}\n/**\n * Returns the widths of all group sets of a column\n * @param {?} groups\n * @param {?} all\n * @return {?}\n */\nfunction columnGroupWidths(groups, all) {\n    return {\n        left: columnTotalWidth(groups.left),\n        center: columnTotalWidth(groups.center),\n        right: columnTotalWidth(groups.right),\n        total: Math.floor(columnTotalWidth(all))\n    };\n}\n/**\n * Calculates the total width of all columns and their groups\n * @param {?} columns\n * @param {?=} prop\n * @return {?}\n */\nfunction columnTotalWidth(columns, prop) {\n    /** @type {?} */\n    let totalWidth = 0;\n    if (columns) {\n        for (const c of columns) {\n            /** @type {?} */\n            const has = prop && c[prop];\n            /** @type {?} */\n            const width = has ? c[prop] : c.width;\n            totalWidth = totalWidth + parseFloat(width);\n        }\n    }\n    return totalWidth;\n}\n/**\n * Calculates the total width of all columns and their groups\n * @param {?} columns\n * @param {?=} prop\n * @return {?}\n */\nfunction columnsTotalWidth(columns, prop) {\n    /** @type {?} */\n    let totalWidth = 0;\n    for (const column of columns) {\n        /** @type {?} */\n        const has = prop && column[prop];\n        totalWidth = totalWidth + (has ? column[prop] : column.width);\n    }\n    return totalWidth;\n}\n/**\n * @param {?} val\n * @return {?}\n */\nfunction columnsByPinArr(val) {\n    /** @type {?} */\n    const colsByPinArr = [];\n    /** @type {?} */\n    const colsByPin = columnsByPin(val);\n    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n    return colsByPinArr;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\nclass RowHeightCache {\n    constructor() {\n        /**\n         * Tree Array stores the cumulative information of the row heights to perform efficient\n         * range queries and updates.  Currently the tree is initialized to the base row\n         * height instead of the detail row height.\n         */\n        this.treeArray = [];\n    }\n    /**\n     * Clear the Tree array.\n     * @return {?}\n     */\n    clearCache() {\n        this.treeArray = [];\n    }\n    /**\n     * Initialize the Fenwick tree with row Heights.\n     *\n     * @param {?} details\n     * @return {?}\n     */\n    initCache(details) {\n        const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\n        /** @type {?} */\n        const isFn = typeof rowHeight === 'function';\n        /** @type {?} */\n        const isDetailFn = typeof detailRowHeight === 'function';\n        if (!isFn && isNaN(rowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n        if (!isDetailFn && isNaN(detailRowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        /** @type {?} */\n        const n = externalVirtual ? rowCount : rows.length;\n        this.treeArray = new Array(n);\n        for (let i = 0; i < n; ++i) {\n            this.treeArray[i] = 0;\n        }\n        for (let i = 0; i < n; ++i) {\n            /** @type {?} */\n            const row = rows[i];\n            /** @type {?} */\n            let currentRowHeight = rowHeight;\n            if (isFn) {\n                currentRowHeight = rowHeight(row);\n            }\n            // Add the detail row height to the already expanded rows.\n            // This is useful for the table that goes through a filter or sort.\n            /** @type {?} */\n            const expanded = rowExpansions.has(row);\n            if (row && expanded) {\n                if (isDetailFn) {\n                    /** @type {?} */\n                    const index = rowIndexes.get(row);\n                    currentRowHeight += detailRowHeight(row, index);\n                }\n                else {\n                    currentRowHeight += detailRowHeight;\n                }\n            }\n            this.update(i, currentRowHeight);\n        }\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.  Below handles edge cases.\n     * @param {?} scrollY\n     * @return {?}\n     */\n    getRowIndex(scrollY) {\n        if (scrollY === 0)\n            return 0;\n        return this.calcRowIndex(scrollY);\n    }\n    /**\n     * When a row is expanded or rowHeight is changed, update the height.  This can\n     * be utilized in future when Angular Data table supports dynamic row heights.\n     * @param {?} atRowIndex\n     * @param {?} byRowHeight\n     * @return {?}\n     */\n    update(atRowIndex, byRowHeight) {\n        if (!this.treeArray.length) {\n            throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n        }\n        /** @type {?} */\n        const n = this.treeArray.length;\n        atRowIndex |= 0;\n        while (atRowIndex < n) {\n            this.treeArray[atRowIndex] += byRowHeight;\n            atRowIndex |= atRowIndex + 1;\n        }\n    }\n    /**\n     * Range Sum query from 1 to the rowIndex\n     * @param {?} atIndex\n     * @return {?}\n     */\n    query(atIndex) {\n        if (!this.treeArray.length) {\n            throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n        }\n        /** @type {?} */\n        let sum = 0;\n        atIndex |= 0;\n        while (atIndex >= 0) {\n            sum += this.treeArray[atIndex];\n            atIndex = (atIndex & (atIndex + 1)) - 1;\n        }\n        return sum;\n    }\n    /**\n     * Find the total height between 2 row indexes\n     * @param {?} atIndexA\n     * @param {?} atIndexB\n     * @return {?}\n     */\n    queryBetween(atIndexA, atIndexB) {\n        return this.query(atIndexB) - this.query(atIndexA - 1);\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.\n     * @private\n     * @param {?} sum\n     * @return {?}\n     */\n    calcRowIndex(sum) {\n        if (!this.treeArray.length)\n            return 0;\n        /** @type {?} */\n        let pos = -1;\n        /** @type {?} */\n        const dataLength = this.treeArray.length;\n        // Get the highest bit for the block size.\n        /** @type {?} */\n        const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n        for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n            /** @type {?} */\n            const nextPos = pos + blockSize;\n            if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n                sum -= this.treeArray[nextPos];\n                pos = nextPos;\n            }\n        }\n        return pos + 1;\n    }\n}\nif (false) {\n    /**\n     * Tree Array stores the cumulative information of the row heights to perform efficient\n     * range queries and updates.  Currently the tree is initialized to the base row\n     * height instead of the detail row height.\n     * @type {?}\n     * @private\n     */\n    RowHeightCache.prototype.treeArray;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst cache = {};\n/** @type {?} */\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\n// Get Prefix\n// http://davidwalsh.name/vendor-prefix\nconst ɵ0 = /**\n * @return {?}\n */\nfunction () {\n    /** @type {?} */\n    const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\n    /** @type {?} */\n    const match = typeof styles !== 'undefined'\n        ? Array.prototype.slice\n            .call(styles)\n            .join('')\n            .match(/-(moz|webkit|ms)-/)\n        : null;\n    /** @type {?} */\n    const pre = match !== null ? match[1] : undefined;\n    // tslint:disable-next-line: tsr-detect-non-literal-regexp\n    /** @type {?} */\n    const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\n    return dom\n        ? {\n            dom,\n            lowercase: pre,\n            css: `-${pre}-`,\n            js: pre[0].toUpperCase() + pre.substr(1)\n        }\n        : undefined;\n};\n/** @type {?} */\nconst prefix = ((ɵ0))();\n/**\n * @param {?} property\n * @return {?}\n */\nfunction getVendorPrefixedName(property) {\n    /** @type {?} */\n    const name = camelCase(property);\n    if (!cache[name]) {\n        if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\n            cache[name] = prefix.css + property;\n        }\n        else if (testStyle[property] !== undefined) {\n            cache[name] = property;\n        }\n    }\n    return cache[name];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// browser detection and prefixing tools\n/** @type {?} */\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\n/** @type {?} */\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\n/** @type {?} */\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\n/** @type {?} */\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\n/** @type {?} */\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\n/** @type {?} */\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\n/**\n * @param {?} styles\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction translateXY(styles, x, y) {\n    if (typeof transform !== 'undefined' && hasCSSTransforms) {\n        if (!isSafari && hasCSS3DTransforms) {\n            styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\n            styles[backfaceVisibility] = 'hidden';\n        }\n        else {\n            styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\n        }\n    }\n    else {\n        styles.top = `${y}px`;\n        styles.left = `${x}px`;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableBodyComponent {\n    /**\n     * Creates an instance of DataTableBodyComponent.\n     * @param {?} cd\n     */\n    constructor(cd) {\n        this.cd = cd;\n        this.selected = [];\n        this.scroll = new EventEmitter();\n        this.page = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.select = new EventEmitter();\n        this.detailToggle = new EventEmitter();\n        this.rowContextmenu = new EventEmitter(false);\n        this.treeAction = new EventEmitter();\n        this.rowHeightsCache = new RowHeightCache();\n        this.temp = [];\n        this.offsetY = 0;\n        this.indexes = {};\n        this.rowIndexes = new Map();\n        this.rowExpansions = [];\n        /**\n         * Get the height of the detail row.\n         */\n        this.getDetailRowHeight = (/**\n         * @param {?=} row\n         * @param {?=} index\n         * @return {?}\n         */\n        (row, index) => {\n            if (!this.rowDetail) {\n                return 0;\n            }\n            /** @type {?} */\n            const rowHeight = this.rowDetail.rowHeight;\n            return typeof rowHeight === 'function' ? rowHeight(row, index) : ((/** @type {?} */ (rowHeight)));\n        });\n        // declare fn here so we can get access to the `this` property\n        this.rowTrackingFn = (/**\n         * @param {?} index\n         * @param {?} row\n         * @return {?}\n         */\n        (index, row) => {\n            /** @type {?} */\n            const idx = this.getRowIndex(row);\n            if (this.trackByProp) {\n                return row[this.trackByProp];\n            }\n            else {\n                return idx;\n            }\n        });\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set pageSize(val) {\n        this._pageSize = val;\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get pageSize() {\n        return this._pageSize;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rows(val) {\n        this._rows = val;\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get rows() {\n        return this._rows;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set columns(val) {\n        this._columns = val;\n        /** @type {?} */\n        const colsByPin = columnsByPin(val);\n        this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n    }\n    /**\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set offset(val) {\n        this._offset = val;\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization))\n            this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get offset() {\n        return this._offset;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rowCount(val) {\n        this._rowCount = val;\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get rowCount() {\n        return this._rowCount;\n    }\n    /**\n     * @return {?}\n     */\n    get bodyWidth() {\n        if (this.scrollbarH) {\n            return this.innerWidth + 'px';\n        }\n        else {\n            return '100%';\n        }\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set bodyHeight(val) {\n        if (this.scrollbarV) {\n            this._bodyHeight = val + 'px';\n        }\n        else {\n            this._bodyHeight = 'auto';\n        }\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get bodyHeight() {\n        return this._bodyHeight;\n    }\n    /**\n     * Returns if selection is enabled.\n     * @return {?}\n     */\n    get selectEnabled() {\n        return !!this.selectionType;\n    }\n    /**\n     * Property that would calculate the height of scroll bar\n     * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n     * calculate scroll height automatically (as height will be undefined).\n     * @return {?}\n     */\n    get scrollHeight() {\n        if (this.scrollbarV && this.virtualization && this.rowCount) {\n            return this.rowHeightsCache.query(this.rowCount - 1);\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n    /**\n     * Called after the constructor, initializing input properties\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.rowDetail) {\n            this.listener = this.rowDetail.toggle.subscribe((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ type, value }) => {\n                if (type === 'row') {\n                    this.toggleRowExpansion(value);\n                }\n                if (type === 'all') {\n                    this.toggleAllRows(value);\n                }\n                // Refresh rows after toggle\n                // Fixes #883\n                this.updateIndexes();\n                this.updateRows();\n                this.cd.markForCheck();\n            }));\n        }\n        if (this.groupHeader) {\n            this.listener = this.groupHeader.toggle.subscribe((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ type, value }) => {\n                if (type === 'group') {\n                    this.toggleRowExpansion(value);\n                }\n                if (type === 'all') {\n                    this.toggleAllRows(value);\n                }\n                // Refresh rows after toggle\n                // Fixes #883\n                this.updateIndexes();\n                this.updateRows();\n                this.cd.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Called once, before the instance is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.rowDetail || this.groupHeader) {\n            this.listener.unsubscribe();\n        }\n    }\n    /**\n     * Updates the Y offset given a new offset.\n     * @param {?=} offset\n     * @return {?}\n     */\n    updateOffsetY(offset) {\n        // scroller is missing on empty table\n        if (!this.scroller) {\n            return;\n        }\n        if (this.scrollbarV && this.virtualization && offset) {\n            // First get the row Index that we need to move to.\n            /** @type {?} */\n            const rowIndex = this.pageSize * offset;\n            offset = this.rowHeightsCache.query(rowIndex - 1);\n        }\n        else if (this.scrollbarV && !this.virtualization) {\n            offset = 0;\n        }\n        this.scroller.setOffset(offset || 0);\n    }\n    /**\n     * Body was scrolled, this is mainly useful for\n     * when a user is server-side pagination via virtual scroll.\n     * @param {?} event\n     * @return {?}\n     */\n    onBodyScroll(event) {\n        /** @type {?} */\n        const scrollYPos = event.scrollYPos;\n        /** @type {?} */\n        const scrollXPos = event.scrollXPos;\n        // if scroll change, trigger update\n        // this is mainly used for header cell positions\n        if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n            this.scroll.emit({\n                offsetY: scrollYPos,\n                offsetX: scrollXPos\n            });\n        }\n        this.offsetY = scrollYPos;\n        this.offsetX = scrollXPos;\n        this.updateIndexes();\n        this.updatePage(event.direction);\n        this.updateRows();\n    }\n    /**\n     * Updates the page given a direction.\n     * @param {?} direction\n     * @return {?}\n     */\n    updatePage(direction) {\n        /** @type {?} */\n        let offset = this.indexes.first / this.pageSize;\n        if (direction === 'up') {\n            offset = Math.ceil(offset);\n        }\n        else if (direction === 'down') {\n            offset = Math.floor(offset);\n        }\n        if (direction !== undefined && !isNaN(offset)) {\n            this.page.emit({ offset });\n        }\n    }\n    /**\n     * Updates the rows in the view port\n     * @return {?}\n     */\n    updateRows() {\n        const { first, last } = this.indexes;\n        /** @type {?} */\n        let rowIndex = first;\n        /** @type {?} */\n        let idx = 0;\n        /** @type {?} */\n        const temp = [];\n        this.rowIndexes.clear();\n        // if grouprowsby has been specified treat row paging\n        // parameters as group paging parameters ie if limit 10 has been\n        // specified treat it as 10 groups rather than 10 rows\n        if (this.groupedRows) {\n            /** @type {?} */\n            let maxRowsPerGroup = 3;\n            // if there is only one group set the maximum number of\n            // rows per group the same as the total number of rows\n            if (this.groupedRows.length === 1) {\n                maxRowsPerGroup = this.groupedRows[0].value.length;\n            }\n            while (rowIndex < last && rowIndex < this.groupedRows.length) {\n                // Add the groups into this page\n                /** @type {?} */\n                const group = this.groupedRows[rowIndex];\n                temp[idx] = group;\n                idx++;\n                // Group index in this context\n                rowIndex++;\n            }\n        }\n        else {\n            while (rowIndex < last && rowIndex < this.rowCount) {\n                /** @type {?} */\n                const row = this.rows[rowIndex];\n                if (row) {\n                    this.rowIndexes.set(row, rowIndex);\n                    temp[idx] = row;\n                }\n                idx++;\n                rowIndex++;\n            }\n        }\n        this.temp = temp;\n    }\n    /**\n     * Get the row height\n     * @param {?} row\n     * @return {?}\n     */\n    getRowHeight(row) {\n        // if its a function return it\n        if (typeof this.rowHeight === 'function') {\n            return this.rowHeight(row);\n        }\n        return (/** @type {?} */ (this.rowHeight));\n    }\n    /**\n     * @param {?} group the group with all rows\n     * @return {?}\n     */\n    getGroupHeight(group) {\n        /** @type {?} */\n        let rowHeight = 0;\n        if (group.value) {\n            for (let index = 0; index < group.value.length; index++) {\n                rowHeight += this.getRowAndDetailHeight(group.value[index]);\n            }\n        }\n        return rowHeight;\n    }\n    /**\n     * Calculate row height based on the expanded state of the row.\n     * @param {?} row\n     * @return {?}\n     */\n    getRowAndDetailHeight(row) {\n        /** @type {?} */\n        let rowHeight = this.getRowHeight(row);\n        /** @type {?} */\n        const expanded = this.getRowExpanded(row);\n        // Adding detail row height if its expanded.\n        if (expanded) {\n            rowHeight += this.getDetailRowHeight(row);\n        }\n        return rowHeight;\n    }\n    /**\n     * Calculates the styles for the row so that the rows can be moved in 2D space\n     * during virtual scroll inside the DOM.   In the below case the Y position is\n     * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n     * 100 px then following styles are generated:\n     *\n     * transform: translate3d(0px, 0px, 0px);    ->  row0\n     * transform: translate3d(0px, 30px, 0px);   ->  row1\n     * transform: translate3d(0px, 130px, 0px);  ->  row2\n     *\n     * Row heights have to be calculated based on the row heights cache as we wont\n     * be able to determine which row is of what height before hand.  In the above\n     * case the positionY of the translate3d for row2 would be the sum of all the\n     * heights of the rows before it (i.e. row0 and row1).\n     *\n     * \\@memberOf DataTableBodyComponent\n     * @param {?} rows the row that needs to be placed in the 2D space.\n     * @return {?} the CSS3 style to be applied\n     *\n     */\n    getRowsStyles(rows) {\n        /** @type {?} */\n        const styles = {};\n        // only add styles for the group if there is a group\n        if (this.groupedRows) {\n            styles.width = this.columnGroupWidths.total;\n        }\n        if (this.scrollbarV && this.virtualization) {\n            /** @type {?} */\n            let idx = 0;\n            if (this.groupedRows) {\n                // Get the latest row rowindex in a group\n                /** @type {?} */\n                const row = rows[rows.length - 1];\n                idx = row ? this.getRowIndex(row) : 0;\n            }\n            else {\n                idx = this.getRowIndex(rows);\n            }\n            // const pos = idx * rowHeight;\n            // The position of this row would be the sum of all row heights\n            // until the previous row position.\n            /** @type {?} */\n            const pos = this.rowHeightsCache.query(idx - 1);\n            translateXY(styles, 0, pos);\n        }\n        return styles;\n    }\n    /**\n     * Calculate bottom summary row offset for scrollbar mode.\n     * For more information about cache and offset calculation\n     * see description for `getRowsStyles` method\n     *\n     * \\@memberOf DataTableBodyComponent\n     * @return {?} the CSS3 style to be applied\n     *\n     */\n    getBottomSummaryRowStyles() {\n        if (!this.scrollbarV || !this.rows || !this.rows.length) {\n            return null;\n        }\n        /** @type {?} */\n        const styles = { position: 'absolute' };\n        /** @type {?} */\n        const pos = this.rowHeightsCache.query(this.rows.length - 1);\n        translateXY(styles, 0, pos);\n        return styles;\n    }\n    /**\n     * Hides the loading indicator\n     * @return {?}\n     */\n    hideIndicator() {\n        setTimeout((/**\n         * @return {?}\n         */\n        () => (this.loadingIndicator = false)), 500);\n    }\n    /**\n     * Updates the index of the rows in the viewport\n     * @return {?}\n     */\n    updateIndexes() {\n        /** @type {?} */\n        let first = 0;\n        /** @type {?} */\n        let last = 0;\n        if (this.scrollbarV) {\n            if (this.virtualization) {\n                // Calculation of the first and last indexes will be based on where the\n                // scrollY position would be at.  The last index would be the one\n                // that shows up inside the view port the last.\n                /** @type {?} */\n                const height = parseInt(this.bodyHeight, 0);\n                first = this.rowHeightsCache.getRowIndex(this.offsetY);\n                last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n            }\n            else {\n                // If virtual rows are not needed\n                // We render all in one go\n                first = 0;\n                last = this.rowCount;\n            }\n        }\n        else {\n            // The server is handling paging and will pass an array that begins with the\n            // element at a specified offset.  first should always be 0 with external paging.\n            if (!this.externalPaging) {\n                first = Math.max(this.offset * this.pageSize, 0);\n            }\n            last = Math.min(first + this.pageSize, this.rowCount);\n        }\n        this.indexes = { first, last };\n    }\n    /**\n     * Refreshes the full Row Height cache.  Should be used\n     * when the entire row array state has changed.\n     * @return {?}\n     */\n    refreshRowHeightCache() {\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\n            return;\n        }\n        // clear the previous row height cache if already present.\n        // this is useful during sorts, filters where the state of the\n        // rows array is changed.\n        this.rowHeightsCache.clearCache();\n        // Initialize the tree only if there are rows inside the tree.\n        if (this.rows && this.rows.length) {\n            /** @type {?} */\n            const rowExpansions = new Set();\n            for (const row of this.rows) {\n                if (this.getRowExpanded(row)) {\n                    rowExpansions.add(row);\n                }\n            }\n            this.rowHeightsCache.initCache({\n                rows: this.rows,\n                rowHeight: this.rowHeight,\n                detailRowHeight: this.getDetailRowHeight,\n                externalVirtual: this.scrollbarV && this.externalPaging,\n                rowCount: this.rowCount,\n                rowIndexes: this.rowIndexes,\n                rowExpansions\n            });\n        }\n    }\n    /**\n     * Gets the index for the view port\n     * @return {?}\n     */\n    getAdjustedViewPortIndex() {\n        // Capture the row index of the first row that is visible on the viewport.\n        // If the scroll bar is just below the row which is highlighted then make that as the\n        // first index.\n        /** @type {?} */\n        const viewPortFirstRowIndex = this.indexes.first;\n        if (this.scrollbarV && this.virtualization) {\n            /** @type {?} */\n            const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n            return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n        }\n        return viewPortFirstRowIndex;\n    }\n    /**\n     * Toggle the Expansion of the row i.e. if the row is expanded then it will\n     * collapse and vice versa.   Note that the expanded status is stored as\n     * a part of the row object itself as we have to preserve the expanded row\n     * status in case of sorting and filtering of the row set.\n     * @param {?} row\n     * @return {?}\n     */\n    toggleRowExpansion(row) {\n        // Capture the row index of the first row that is visible on the viewport.\n        /** @type {?} */\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n        /** @type {?} */\n        const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\n        /** @type {?} */\n        const expanded = rowExpandedIdx > -1;\n        // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n        if (this.scrollbarV && this.virtualization) {\n            /** @type {?} */\n            const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\n            // const idx = this.rowIndexes.get(row) || 0;\n            /** @type {?} */\n            const idx = this.getRowIndex(row);\n            this.rowHeightsCache.update(idx, detailRowHeight);\n        }\n        // Update the toggled row and update thive nevere heights in the cache.\n        if (expanded) {\n            this.rowExpansions.splice(rowExpandedIdx, 1);\n        }\n        else {\n            this.rowExpansions.push(row);\n        }\n        this.detailToggle.emit({\n            rows: [row],\n            currentIndex: viewPortFirstRowIndex\n        });\n    }\n    /**\n     * Expand/Collapse all the rows no matter what their state is.\n     * @param {?} expanded\n     * @return {?}\n     */\n    toggleAllRows(expanded) {\n        // clear prev expansions\n        this.rowExpansions = [];\n        // Capture the row index of the first row that is visible on the viewport.\n        /** @type {?} */\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n        if (expanded) {\n            for (const row of this.rows) {\n                this.rowExpansions.push(row);\n            }\n        }\n        if (this.scrollbarV) {\n            // Refresh the full row heights cache since every row was affected.\n            this.recalcLayout();\n        }\n        // Emit all rows that have been expanded.\n        this.detailToggle.emit({\n            rows: this.rows,\n            currentIndex: viewPortFirstRowIndex\n        });\n    }\n    /**\n     * Recalculates the table\n     * @return {?}\n     */\n    recalcLayout() {\n        this.refreshRowHeightCache();\n        this.updateIndexes();\n        this.updateRows();\n    }\n    /**\n     * Tracks the column\n     * @param {?} index\n     * @param {?} column\n     * @return {?}\n     */\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    /**\n     * Gets the row pinning group styles\n     * @param {?} group\n     * @return {?}\n     */\n    stylesByGroup(group) {\n        /** @type {?} */\n        const widths = this.columnGroupWidths;\n        /** @type {?} */\n        const offsetX = this.offsetX;\n        /** @type {?} */\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'left') {\n            translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            /** @type {?} */\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\n            /** @type {?} */\n            const totalDiff = widths.total - bodyWidth;\n            /** @type {?} */\n            const offsetDiff = totalDiff - offsetX;\n            /** @type {?} */\n            const offset = offsetDiff * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n    /**\n     * Returns if the row was expanded and set default row expansion when row expansion is empty\n     * @param {?} row\n     * @return {?}\n     */\n    getRowExpanded(row) {\n        if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\n            for (const group of this.groupedRows) {\n                this.rowExpansions.push(group);\n            }\n        }\n        return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\n    }\n    /**\n     * @param {?} row\n     * @param {?} expanded\n     * @return {?}\n     */\n    getRowExpandedIdx(row, expanded) {\n        if (!expanded || !expanded.length)\n            return -1;\n        /** @type {?} */\n        const rowId = this.rowIdentity(row);\n        return expanded.findIndex((/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => {\n            /** @type {?} */\n            const id = this.rowIdentity(r);\n            return id === rowId;\n        }));\n    }\n    /**\n     * Gets the row index given a row\n     * @param {?} row\n     * @return {?}\n     */\n    getRowIndex(row) {\n        return this.rowIndexes.get(row) || 0;\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    onTreeAction(row) {\n        this.treeAction.emit({ row });\n    }\n}\nDataTableBodyComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-body',\n                template: `\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    class: 'datatable-body'\n                }\n            }] }\n];\n/** @nocollapse */\nDataTableBodyComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nDataTableBodyComponent.propDecorators = {\n    scrollbarV: [{ type: Input }],\n    scrollbarH: [{ type: Input }],\n    loadingIndicator: [{ type: Input }],\n    externalPaging: [{ type: Input }],\n    rowHeight: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    emptyMessage: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    selected: [{ type: Input }],\n    rowIdentity: [{ type: Input }],\n    rowDetail: [{ type: Input }],\n    groupHeader: [{ type: Input }],\n    selectCheck: [{ type: Input }],\n    displayCheck: [{ type: Input }],\n    trackByProp: [{ type: Input }],\n    rowClass: [{ type: Input }],\n    groupedRows: [{ type: Input }],\n    groupExpansionDefault: [{ type: Input }],\n    innerWidth: [{ type: Input }],\n    groupRowsBy: [{ type: Input }],\n    virtualization: [{ type: Input }],\n    summaryRow: [{ type: Input }],\n    summaryPosition: [{ type: Input }],\n    summaryHeight: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    rows: [{ type: Input }],\n    columns: [{ type: Input }],\n    offset: [{ type: Input }],\n    rowCount: [{ type: Input }],\n    bodyWidth: [{ type: HostBinding, args: ['style.width',] }],\n    bodyHeight: [{ type: Input }, { type: HostBinding, args: ['style.height',] }],\n    scroll: [{ type: Output }],\n    page: [{ type: Output }],\n    activate: [{ type: Output }],\n    select: [{ type: Output }],\n    detailToggle: [{ type: Output }],\n    rowContextmenu: [{ type: Output }],\n    treeAction: [{ type: Output }],\n    scroller: [{ type: ViewChild, args: [ScrollerComponent, { static: false },] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableBodyComponent.prototype.scrollbarV;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.scrollbarH;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.loadingIndicator;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.externalPaging;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowHeight;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.offsetX;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.emptyMessage;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.selectionType;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.selected;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowIdentity;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowDetail;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.groupHeader;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.selectCheck;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.displayCheck;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.trackByProp;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowClass;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.groupedRows;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.groupExpansionDefault;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.innerWidth;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.groupRowsBy;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.virtualization;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.summaryRow;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.summaryPosition;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.summaryHeight;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.scroll;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.page;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.activate;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.select;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.detailToggle;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowContextmenu;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.treeAction;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.scroller;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowHeightsCache;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.temp;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.offsetY;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.indexes;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.columnGroupWidths;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.columnGroupWidthsWithoutGroup;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowTrackingFn;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.listener;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowIndexes;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowExpansions;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._rows;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._bodyHeight;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._columns;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._rowCount;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._offset;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._pageSize;\n    /**\n     * Get the height of the detail row.\n     * @type {?}\n     */\n    DataTableBodyComponent.prototype.getDetailRowHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableHeaderComponent {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) {\n        this.cd = cd;\n        this.sort = new EventEmitter();\n        this.reorder = new EventEmitter();\n        this.resize = new EventEmitter();\n        this.select = new EventEmitter();\n        this.columnContextmenu = new EventEmitter(false);\n        this._columnGroupWidths = {\n            total: 100\n        };\n        this._styleByGroup = {\n            left: {},\n            center: {},\n            right: {}\n        };\n        this.destroyed = false;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set innerWidth(val) {\n        this._innerWidth = val;\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            if (this._columns) {\n                /** @type {?} */\n                const colByPin = columnsByPin(this._columns);\n                this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n                this.setStylesByGroup();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get innerWidth() {\n        return this._innerWidth;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set headerHeight(val) {\n        if (val !== 'auto') {\n            this._headerHeight = `${val}px`;\n        }\n        else {\n            this._headerHeight = val;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get headerHeight() {\n        return this._headerHeight;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set columns(val) {\n        this._columns = val;\n        /** @type {?} */\n        const colsByPin = columnsByPin(val);\n        this._columnsByPin = columnsByPinArr(val);\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n            this.setStylesByGroup();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set offsetX(val) {\n        this._offsetX = val;\n        this.setStylesByGroup();\n    }\n    /**\n     * @return {?}\n     */\n    get offsetX() {\n        return this._offsetX;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed = true;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onLongPressStart({ event, model }) {\n        model.dragging = true;\n        this.dragEventTarget = event;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onLongPressEnd({ event, model }) {\n        this.dragEventTarget = event;\n        // delay resetting so sort can be\n        // prevented if we were dragging\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            // datatable component creates copies from columns on reorder\n            // set dragging to false on new objects\n            /** @type {?} */\n            const column = this._columns.find((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => c.$$id === model.$$id));\n            if (column) {\n                column.dragging = false;\n            }\n        }), 5);\n    }\n    /**\n     * @return {?}\n     */\n    get headerWidth() {\n        if (this.scrollbarH) {\n            return this.innerWidth + 'px';\n        }\n        return '100%';\n    }\n    /**\n     * @param {?} index\n     * @param {?} colGroup\n     * @return {?}\n     */\n    trackByGroups(index, colGroup) {\n        return colGroup.type;\n    }\n    /**\n     * @param {?} index\n     * @param {?} column\n     * @return {?}\n     */\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    /**\n     * @param {?} width\n     * @param {?} column\n     * @return {?}\n     */\n    onColumnResized(width, column) {\n        if (width <= column.minWidth) {\n            width = column.minWidth;\n        }\n        else if (width >= column.maxWidth) {\n            width = column.maxWidth;\n        }\n        this.resize.emit({\n            column,\n            prevValue: column.width,\n            newValue: width\n        });\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onColumnReordered({ prevIndex, newIndex, model }) {\n        /** @type {?} */\n        const column = this.getColumn(newIndex);\n        column.isTarget = false;\n        column.targetMarkerContext = undefined;\n        this.reorder.emit({\n            column: model,\n            prevValue: prevIndex,\n            newValue: newIndex\n        });\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onTargetChanged({ prevIndex, newIndex, initialIndex }) {\n        if (prevIndex || prevIndex === 0) {\n            /** @type {?} */\n            const oldColumn = this.getColumn(prevIndex);\n            oldColumn.isTarget = false;\n            oldColumn.targetMarkerContext = undefined;\n        }\n        if (newIndex || newIndex === 0) {\n            /** @type {?} */\n            const newColumn = this.getColumn(newIndex);\n            newColumn.isTarget = true;\n            if (initialIndex !== newIndex) {\n                newColumn.targetMarkerContext = {\n                    class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n                };\n            }\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    getColumn(index) {\n        /** @type {?} */\n        const leftColumnCount = this._columnsByPin[0].columns.length;\n        if (index < leftColumnCount) {\n            return this._columnsByPin[0].columns[index];\n        }\n        /** @type {?} */\n        const centerColumnCount = this._columnsByPin[1].columns.length;\n        if (index < leftColumnCount + centerColumnCount) {\n            return this._columnsByPin[1].columns[index - leftColumnCount];\n        }\n        return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onSort({ column, prevValue, newValue }) {\n        // if we are dragging don't sort!\n        if (column.dragging) {\n            return;\n        }\n        /** @type {?} */\n        const sorts = this.calcNewSorts(column, prevValue, newValue);\n        this.sort.emit({\n            sorts,\n            column,\n            prevValue,\n            newValue\n        });\n    }\n    /**\n     * @param {?} column\n     * @param {?} prevValue\n     * @param {?} newValue\n     * @return {?}\n     */\n    calcNewSorts(column, prevValue, newValue) {\n        /** @type {?} */\n        let idx = 0;\n        if (!this.sorts) {\n            this.sorts = [];\n        }\n        /** @type {?} */\n        const sorts = this.sorts.map((/**\n         * @param {?} s\n         * @param {?} i\n         * @return {?}\n         */\n        (s, i) => {\n            s = Object.assign({}, s);\n            if (s.prop === column.prop) {\n                idx = i;\n            }\n            return s;\n        }));\n        if (newValue === undefined) {\n            sorts.splice(idx, 1);\n        }\n        else if (prevValue) {\n            sorts[idx].dir = newValue;\n        }\n        else {\n            if (this.sortType === SortType.single) {\n                sorts.splice(0, this.sorts.length);\n            }\n            sorts.push({ dir: newValue, prop: column.prop });\n        }\n        return sorts;\n    }\n    /**\n     * @return {?}\n     */\n    setStylesByGroup() {\n        this._styleByGroup.left = this.calcStylesByGroup('left');\n        this._styleByGroup.center = this.calcStylesByGroup('center');\n        this._styleByGroup.right = this.calcStylesByGroup('right');\n        if (!this.destroyed) {\n            this.cd.detectChanges();\n        }\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    calcStylesByGroup(group) {\n        /** @type {?} */\n        const widths = this._columnGroupWidths;\n        /** @type {?} */\n        const offsetX = this.offsetX;\n        /** @type {?} */\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'center') {\n            translateXY(styles, offsetX * -1, 0);\n        }\n        else if (group === 'right') {\n            /** @type {?} */\n            const totalDiff = widths.total - this.innerWidth;\n            /** @type {?} */\n            const offset = totalDiff * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n}\nDataTableHeaderComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-header',\n                template: `\n    <div\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `,\n                host: {\n                    class: 'datatable-header'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nDataTableHeaderComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nDataTableHeaderComponent.propDecorators = {\n    sortAscendingIcon: [{ type: Input }],\n    sortDescendingIcon: [{ type: Input }],\n    scrollbarH: [{ type: Input }],\n    dealsWithGroup: [{ type: Input }],\n    targetMarkerTemplate: [{ type: Input }],\n    innerWidth: [{ type: Input }],\n    sorts: [{ type: Input }],\n    sortType: [{ type: Input }],\n    allRowsSelected: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    reorderable: [{ type: Input }],\n    headerHeight: [{ type: HostBinding, args: ['style.height',] }, { type: Input }],\n    columns: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    sort: [{ type: Output }],\n    reorder: [{ type: Output }],\n    resize: [{ type: Output }],\n    select: [{ type: Output }],\n    columnContextmenu: [{ type: Output }],\n    headerWidth: [{ type: HostBinding, args: ['style.width',] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sortAscendingIcon;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sortDescendingIcon;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.scrollbarH;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.dealsWithGroup;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.targetMarkerTemplate;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.targetMarkerContext;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sorts;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sortType;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.allRowsSelected;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.selectionType;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.reorderable;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.dragEventTarget;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sort;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.reorder;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.resize;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.select;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.columnContextmenu;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._columnsByPin;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._columnGroupWidths;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._innerWidth;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._offsetX;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._columns;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._headerHeight;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._styleByGroup;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderComponent.prototype.destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throttle a function\n * @param {?} func\n * @param {?} wait\n * @param {?=} options\n * @return {?}\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    /** @type {?} */\n    let context;\n    /** @type {?} */\n    let args;\n    /** @type {?} */\n    let result;\n    /** @type {?} */\n    let timeout = null;\n    /** @type {?} */\n    let previous = 0;\n    /**\n     * @return {?}\n     */\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return (/**\n     * @this {?}\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        /** @type {?} */\n        const remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    });\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n * @param {?} duration\n * @param {?=} options\n * @return {?}\n */\nfunction throttleable(duration, options) {\n    return (/**\n     * @param {?} target\n     * @param {?} key\n     * @param {?} descriptor\n     * @return {?}\n     */\n    function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: (/**\n             * @return {?}\n             */\n            function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            })\n        };\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Calculates the Total Flex Grow\n * @param {?} columns\n * @return {?}\n */\nfunction getTotalFlexGrow(columns) {\n    /** @type {?} */\n    let totalFlexGrow = 0;\n    for (const c of columns) {\n        totalFlexGrow += c.flexGrow || 0;\n    }\n    return totalFlexGrow;\n}\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n * @param {?} allColumns\n * @param {?} expectedWidth\n * @return {?}\n */\nfunction adjustColumnWidths(allColumns, expectedWidth) {\n    /** @type {?} */\n    const columnsWidth = columnsTotalWidth(allColumns);\n    /** @type {?} */\n    const totalFlexGrow = getTotalFlexGrow(allColumns);\n    /** @type {?} */\n    const colsByGroup = columnsByPin(allColumns);\n    if (columnsWidth !== expectedWidth) {\n        scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n    }\n}\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n * @param {?} colsByGroup\n * @param {?} maxWidth\n * @param {?} totalFlexGrow\n * @return {?}\n */\nfunction scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {\n    // calculate total width and flexgrow points for coulumns that can be resized\n    for (const attr in colsByGroup) {\n        for (const column of colsByGroup[attr]) {\n            if (!column.canAutoResize) {\n                maxWidth -= column.width;\n                totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\n            }\n            else {\n                column.width = 0;\n            }\n        }\n    }\n    /** @type {?} */\n    const hasMinWidth = {};\n    /** @type {?} */\n    let remainingWidth = maxWidth;\n    // resize columns until no width is left to be distributed\n    do {\n        /** @type {?} */\n        const widthPerFlexPoint = remainingWidth / totalFlexGrow;\n        remainingWidth = 0;\n        for (const attr in colsByGroup) {\n            for (const column of colsByGroup[attr]) {\n                // if the column can be resize and it hasn't reached its minimum width yet\n                if (column.canAutoResize && !hasMinWidth[column.prop]) {\n                    /** @type {?} */\n                    const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n                    if (column.minWidth !== undefined && newWidth < column.minWidth) {\n                        remainingWidth += newWidth - column.minWidth;\n                        column.width = column.minWidth;\n                        hasMinWidth[column.prop] = true;\n                    }\n                    else {\n                        column.width = newWidth;\n                    }\n                }\n            }\n        }\n    } while (remainingWidth !== 0);\n}\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n * @param {?} allColumns\n * @param {?} expectedWidth\n * @param {?} startIdx\n * @param {?} allowBleed\n * @param {?=} defaultColWidth\n * @return {?}\n */\nfunction forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth = 300) {\n    /** @type {?} */\n    const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter((/**\n     * @param {?} c\n     * @return {?}\n     */\n    c => {\n        return c.canAutoResize !== false;\n    }));\n    for (const column of columnsToResize) {\n        if (!column.$$oldWidth) {\n            column.$$oldWidth = column.width;\n        }\n    }\n    /** @type {?} */\n    let additionWidthPerColumn = 0;\n    /** @type {?} */\n    let exceedsWindow = false;\n    /** @type {?} */\n    let contentWidth = getContentWidth(allColumns, defaultColWidth);\n    /** @type {?} */\n    let remainingWidth = expectedWidth - contentWidth;\n    /** @type {?} */\n    const columnsProcessed = [];\n    /** @type {?} */\n    const remainingWidthLimit = 1;\n    // This loop takes care of the\n    do {\n        additionWidthPerColumn = remainingWidth / columnsToResize.length;\n        exceedsWindow = contentWidth >= expectedWidth;\n        for (const column of columnsToResize) {\n            if (exceedsWindow && allowBleed) {\n                column.width = column.$$oldWidth || column.width || defaultColWidth;\n            }\n            else {\n                /** @type {?} */\n                const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n                if (column.minWidth && newSize < column.minWidth) {\n                    column.width = column.minWidth;\n                    columnsProcessed.push(column);\n                }\n                else if (column.maxWidth && newSize > column.maxWidth) {\n                    column.width = column.maxWidth;\n                    columnsProcessed.push(column);\n                }\n                else {\n                    column.width = newSize;\n                }\n            }\n            column.width = Math.max(0, column.width);\n        }\n        contentWidth = getContentWidth(allColumns);\n        remainingWidth = expectedWidth - contentWidth;\n        removeProcessedColumns(columnsToResize, columnsProcessed);\n    } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\n}\n/**\n * Remove the processed columns from the current active columns.\n * @param {?} columnsToResize\n * @param {?} columnsProcessed\n * @return {?}\n */\nfunction removeProcessedColumns(columnsToResize, columnsProcessed) {\n    for (const column of columnsProcessed) {\n        /** @type {?} */\n        const index = columnsToResize.indexOf(column);\n        columnsToResize.splice(index, 1);\n    }\n}\n/**\n * Gets the width of the columns\n * @param {?} allColumns\n * @param {?=} defaultColWidth\n * @return {?}\n */\nfunction getContentWidth(allColumns, defaultColWidth = 300) {\n    /** @type {?} */\n    let contentWidth = 0;\n    for (const column of allColumns) {\n        contentWidth += column.width || defaultColWidth;\n    }\n    return contentWidth;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst SortDirection = {\n    asc: 'asc',\n    desc: 'desc',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets the next sort direction\n * @param {?} sortType\n * @param {?} current\n * @return {?}\n */\nfunction nextSortDir(sortType, current) {\n    if (sortType === SortType.single) {\n        if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else {\n            return SortDirection.asc;\n        }\n    }\n    else {\n        if (!current) {\n            return SortDirection.asc;\n        }\n        else if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else if (current === SortDirection.desc) {\n            return undefined;\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n}\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction orderByComparator(a, b) {\n    if (a === null || typeof a === 'undefined')\n        a = 0;\n    if (b === null || typeof b === 'undefined')\n        b = 0;\n    if (a instanceof Date && b instanceof Date) {\n        if (a < b)\n            return -1;\n        if (a > b)\n            return 1;\n    }\n    else if (isNaN(parseFloat(a)) || !isFinite(a) || (isNaN(parseFloat(b)) || !isFinite(b))) {\n        // Convert to string in case of a=0 or b=0\n        a = String(a);\n        b = String(b);\n        // Isn't a number so lowercase the string to properly compare\n        if (a.toLowerCase() < b.toLowerCase())\n            return -1;\n        if (a.toLowerCase() > b.toLowerCase())\n            return 1;\n    }\n    else {\n        // Parse strings as numbers to compare properly\n        if (parseFloat(a) < parseFloat(b))\n            return -1;\n        if (parseFloat(a) > parseFloat(b))\n            return 1;\n    }\n    // equal each other\n    return 0;\n}\n/**\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\n * does not sort the `rows` argument in place\n * @param {?} rows\n * @param {?} columns\n * @param {?} dirs\n * @return {?}\n */\nfunction sortRows(rows, columns, dirs) {\n    if (!rows)\n        return [];\n    if (!dirs || !dirs.length || !columns)\n        return [...rows];\n    /**\n     * record the row ordering of results from prior sort operations (if applicable)\n     * this is necessary to guarantee stable sorting behavior\n     * @type {?}\n     */\n    const rowToIndexMap = new Map();\n    rows.forEach((/**\n     * @param {?} row\n     * @param {?} index\n     * @return {?}\n     */\n    (row, index) => rowToIndexMap.set(row, index)));\n    /** @type {?} */\n    const temp = [...rows];\n    /** @type {?} */\n    const cols = columns.reduce((/**\n     * @param {?} obj\n     * @param {?} col\n     * @return {?}\n     */\n    (obj, col) => {\n        if (col.comparator && typeof col.comparator === 'function') {\n            obj[col.prop] = col.comparator;\n        }\n        return obj;\n    }), {});\n    // cache valueGetter and compareFn so that they\n    // do not need to be looked-up in the sort function body\n    /** @type {?} */\n    const cachedDirs = dirs.map((/**\n     * @param {?} dir\n     * @return {?}\n     */\n    dir => {\n        /** @type {?} */\n        const prop = dir.prop;\n        return {\n            prop,\n            dir: dir.dir,\n            valueGetter: getterForProp(prop),\n            compareFn: cols[prop] || orderByComparator\n        };\n    }));\n    return temp.sort((/**\n     * @param {?} rowA\n     * @param {?} rowB\n     * @return {?}\n     */\n    function (rowA, rowB) {\n        for (const cachedDir of cachedDirs) {\n            // Get property and valuegetters for column to be sorted\n            const { prop, valueGetter } = cachedDir;\n            // Get A and B cell values from rows based on properties of the columns\n            /** @type {?} */\n            const propA = valueGetter(rowA, prop);\n            /** @type {?} */\n            const propB = valueGetter(rowB, prop);\n            // Compare function gets five parameters:\n            // Two cell values to be compared as propA and propB\n            // Two rows corresponding to the cells as rowA and rowB\n            // Direction of the sort for this column as SortDirection\n            // Compare can be a standard JS comparison function (a,b) => -1|0|1\n            // as additional parameters are silently ignored. The whole row and sort\n            // direction enable more complex sort logic.\n            /** @type {?} */\n            const comparison = cachedDir.dir !== SortDirection.desc\n                ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\n                : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\n            // Don't return 0 yet in case of needing to sort by next property\n            if (comparison !== 0)\n                return comparison;\n        }\n        if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB)))\n            return 0;\n        /**\n         * all else being equal, preserve original order of the rows (stable sort)\n         */\n        return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableComponent {\n    /**\n     * @param {?} scrollbarHelper\n     * @param {?} dimensionsHelper\n     * @param {?} cd\n     * @param {?} element\n     * @param {?} differs\n     * @param {?} columnChangesService\n     * @param {?} configuration\n     */\n    constructor(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {\n        this.scrollbarHelper = scrollbarHelper;\n        this.dimensionsHelper = dimensionsHelper;\n        this.cd = cd;\n        this.columnChangesService = columnChangesService;\n        this.configuration = configuration;\n        /**\n         * List of row objects that should be\n         * represented as selected in the grid.\n         * Default value: `[]`\n         */\n        this.selected = [];\n        /**\n         * Enable vertical scrollbars\n         */\n        this.scrollbarV = false;\n        /**\n         * Enable horz scrollbars\n         */\n        this.scrollbarH = false;\n        /**\n         * The row height; which is necessary\n         * to calculate the height for the lazy rendering.\n         */\n        this.rowHeight = 30;\n        /**\n         * Type of column width distribution formula.\n         * Example: flex, force, standard\n         */\n        this.columnMode = ColumnMode.standard;\n        /**\n         * The minimum header height in pixels.\n         * Pass a falsey for no header\n         */\n        this.headerHeight = 30;\n        /**\n         * The minimum footer height in pixels.\n         * Pass falsey for no footer\n         */\n        this.footerHeight = 0;\n        /**\n         * If the table should use external paging\n         * otherwise its assumed that all data is preloaded.\n         */\n        this.externalPaging = false;\n        /**\n         * If the table should use external sorting or\n         * the built-in basic sorting.\n         */\n        this.externalSorting = false;\n        /**\n         * Show the linear loading bar.\n         * Default value: `false`\n         */\n        this.loadingIndicator = false;\n        /**\n         * Enable/Disable ability to re-order columns\n         * by dragging them.\n         */\n        this.reorderable = true;\n        /**\n         * Swap columns on re-order columns or\n         * move them.\n         */\n        this.swapColumns = true;\n        /**\n         * The type of sorting\n         */\n        this.sortType = SortType.single;\n        /**\n         * Array of sorted columns by property and type.\n         * Default value: `[]`\n         */\n        this.sorts = [];\n        /**\n         * Css class overrides\n         */\n        this.cssClasses = {\n            sortAscending: 'datatable-icon-up',\n            sortDescending: 'datatable-icon-down',\n            pagerLeftArrow: 'datatable-icon-left',\n            pagerRightArrow: 'datatable-icon-right',\n            pagerPrevious: 'datatable-icon-prev',\n            pagerNext: 'datatable-icon-skip'\n        };\n        /**\n         * Message overrides for localization\n         *\n         * emptyMessage     [default] = 'No data to display'\n         * totalMessage     [default] = 'total'\n         * selectedMessage  [default] = 'selected'\n         */\n        this.messages = {\n            // Message to show when array is presented\n            // but contains no values\n            emptyMessage: 'No data to display',\n            // Footer total message\n            totalMessage: 'total',\n            // Footer selected message\n            selectedMessage: 'selected'\n        };\n        /**\n         * A boolean you can use to set the detault behaviour of rows and groups\n         * whether they will start expanded or not. If ommited the default is NOT expanded.\n         *\n         */\n        this.groupExpansionDefault = false;\n        /**\n         * Property to which you can use for determining select all\n         * rows on current page or not.\n         *\n         * \\@memberOf DatatableComponent\n         */\n        this.selectAllRowsOnPage = false;\n        /**\n         * A flag for row virtualization on / off\n         */\n        this.virtualization = true;\n        /**\n         * A flag for switching summary row on / off\n         */\n        this.summaryRow = false;\n        /**\n         * A height of summary row\n         */\n        this.summaryHeight = 30;\n        /**\n         * A property holds a summary row position: top/bottom\n         */\n        this.summaryPosition = 'top';\n        /**\n         * Body was scrolled typically in a `scrollbarV:true` scenario.\n         */\n        this.scroll = new EventEmitter();\n        /**\n         * A cell or row was focused via keyboard or mouse click.\n         */\n        this.activate = new EventEmitter();\n        /**\n         * A cell or row was selected.\n         */\n        this.select = new EventEmitter();\n        /**\n         * Column sort was invoked.\n         */\n        this.sort = new EventEmitter();\n        /**\n         * The table was paged either triggered by the pager or the body scroll.\n         */\n        this.page = new EventEmitter();\n        /**\n         * Columns were re-ordered.\n         */\n        this.reorder = new EventEmitter();\n        /**\n         * Column was resized.\n         */\n        this.resize = new EventEmitter();\n        /**\n         * The context menu was invoked on the table.\n         * type indicates whether the header or the body was clicked.\n         * content contains either the column or the row that was clicked.\n         */\n        this.tableContextmenu = new EventEmitter(false);\n        /**\n         * A row was expanded ot collapsed for tree\n         */\n        this.treeAction = new EventEmitter();\n        this.rowCount = 0;\n        this._offsetX = new BehaviorSubject(0);\n        this._count = 0;\n        this._offset = 0;\n        this._subscriptions = [];\n        /**\n         * This will be used when displaying or selecting rows.\n         * when tracking/comparing them, we'll use the value of this fn,\n         *\n         * (`fn(x) === fn(y)` instead of `x === y`)\n         */\n        this.rowIdentity = (/**\n         * @param {?} x\n         * @return {?}\n         */\n        (x) => {\n            if (this._groupRowsBy) {\n                // each group in groupedRows are stored as {key, value: [rows]},\n                // where key is the groupRowsBy index\n                return x.key;\n            }\n            else {\n                return x;\n            }\n        });\n        // get ref to elm for measuring\n        this.element = element.nativeElement;\n        this.rowDiffer = differs.find({}).create();\n        // apply global settings from Module.forRoot\n        if (this.configuration && this.configuration.messages) {\n            this.messages = Object.assign({}, this.configuration.messages);\n        }\n    }\n    /**\n     * Rows that are displayed in the table.\n     * @param {?} val\n     * @return {?}\n     */\n    set rows(val) {\n        this._rows = val;\n        if (val) {\n            this._internalRows = [...val];\n        }\n        // auto sort on new updates\n        if (!this.externalSorting) {\n            this.sortInternalRows();\n        }\n        // auto group by parent on new update\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n        // recalculate sizes/etc\n        this.recalculate();\n        if (this._rows && this._groupRowsBy) {\n            // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n            this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n        }\n        this.cd.markForCheck();\n    }\n    /**\n     * Gets the rows.\n     * @return {?}\n     */\n    get rows() {\n        return this._rows;\n    }\n    /**\n     * This attribute allows the user to set the name of the column to group the data with\n     * @param {?} val\n     * @return {?}\n     */\n    set groupRowsBy(val) {\n        if (val) {\n            this._groupRowsBy = val;\n            if (this._rows && this._groupRowsBy) {\n                // cretes a new array with the data grouped\n                this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get groupRowsBy() {\n        return this._groupRowsBy;\n    }\n    /**\n     * Columns to be displayed.\n     * @param {?} val\n     * @return {?}\n     */\n    set columns(val) {\n        if (val) {\n            this._internalColumns = [...val];\n            setColumnDefaults(this._internalColumns);\n            this.recalculateColumns();\n        }\n        this._columns = val;\n    }\n    /**\n     * Get the columns.\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * The page size to be shown.\n     * Default value: `undefined`\n     * @param {?} val\n     * @return {?}\n     */\n    set limit(val) {\n        this._limit = val;\n        // recalculate sizes/etc\n        this.recalculate();\n    }\n    /**\n     * Gets the limit.\n     * @return {?}\n     */\n    get limit() {\n        return this._limit;\n    }\n    /**\n     * The total count of all rows.\n     * Default value: `0`\n     * @param {?} val\n     * @return {?}\n     */\n    set count(val) {\n        this._count = val;\n        // recalculate sizes/etc\n        this.recalculate();\n    }\n    /**\n     * Gets the count.\n     * @return {?}\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * The current offset ( page - 1 ) shown.\n     * Default value: `0`\n     * @param {?} val\n     * @return {?}\n     */\n    set offset(val) {\n        this._offset = val;\n    }\n    /**\n     * @return {?}\n     */\n    get offset() {\n        return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n    }\n    /**\n     * CSS class applied if the header height if fixed height.\n     * @return {?}\n     */\n    get isFixedHeader() {\n        /** @type {?} */\n        const headerHeight = this.headerHeight;\n        return typeof headerHeight === 'string' ? (/** @type {?} */ (headerHeight)) !== 'auto' : true;\n    }\n    /**\n     * CSS class applied to the root element if\n     * the row heights are fixed heights.\n     * @return {?}\n     */\n    get isFixedRow() {\n        return this.rowHeight !== 'auto';\n    }\n    /**\n     * CSS class applied to root element if\n     * vertical scrolling is enabled.\n     * @return {?}\n     */\n    get isVertScroll() {\n        return this.scrollbarV;\n    }\n    /**\n     * CSS class applied to root element if\n     * virtualization is enabled.\n     * @return {?}\n     */\n    get isVirtualized() {\n        return this.virtualization;\n    }\n    /**\n     * CSS class applied to the root element\n     * if the horziontal scrolling is enabled.\n     * @return {?}\n     */\n    get isHorScroll() {\n        return this.scrollbarH;\n    }\n    /**\n     * CSS class applied to root element is selectable.\n     * @return {?}\n     */\n    get isSelectable() {\n        return this.selectionType !== undefined;\n    }\n    /**\n     * CSS class applied to root is checkbox selection.\n     * @return {?}\n     */\n    get isCheckboxSelection() {\n        return this.selectionType === SelectionType.checkbox;\n    }\n    /**\n     * CSS class applied to root if cell selection.\n     * @return {?}\n     */\n    get isCellSelection() {\n        return this.selectionType === SelectionType.cell;\n    }\n    /**\n     * CSS class applied to root if single select.\n     * @return {?}\n     */\n    get isSingleSelection() {\n        return this.selectionType === SelectionType.single;\n    }\n    /**\n     * CSS class added to root element if mulit select\n     * @return {?}\n     */\n    get isMultiSelection() {\n        return this.selectionType === SelectionType.multi;\n    }\n    /**\n     * CSS class added to root element if mulit click select\n     * @return {?}\n     */\n    get isMultiClickSelection() {\n        return this.selectionType === SelectionType.multiClick;\n    }\n    /**\n     * Column templates gathered from `ContentChildren`\n     * if described in your markup.\n     * @param {?} val\n     * @return {?}\n     */\n    set columnTemplates(val) {\n        this._columnTemplates = val;\n        this.translateColumns(val);\n    }\n    /**\n     * Returns the column templates.\n     * @return {?}\n     */\n    get columnTemplates() {\n        return this._columnTemplates;\n    }\n    /**\n     * Returns if all rows are selected.\n     * @return {?}\n     */\n    get allRowsSelected() {\n        /** @type {?} */\n        let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n        if (this.selectAllRowsOnPage) {\n            /** @type {?} */\n            const indexes = this.bodyComponent.indexes;\n            /** @type {?} */\n            const rowsOnPage = indexes.last - indexes.first;\n            allRowsSelected = this.selected.length === rowsOnPage;\n        }\n        return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n    }\n    /**\n     * Lifecycle hook that is called after data-bound\n     * properties of a directive are initialized.\n     * @return {?}\n     */\n    ngOnInit() {\n        // need to call this immediatly to size\n        // if the table is hidden the visibility\n        // listener will invoke this itself upon show\n        this.recalculate();\n    }\n    /**\n     * Lifecycle hook that is called after a component's\n     * view has been fully initialized.\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!this.externalSorting) {\n            this.sortInternalRows();\n        }\n        // this has to be done to prevent the change detection\n        // tree from freaking out because we are readjusting\n        if (typeof requestAnimationFrame === 'undefined') {\n            return;\n        }\n        requestAnimationFrame((/**\n         * @return {?}\n         */\n        () => {\n            this.recalculate();\n            // emit page for virtual server-side kickoff\n            if (this.externalPaging && this.scrollbarV) {\n                this.page.emit({\n                    count: this.count,\n                    pageSize: this.pageSize,\n                    limit: this.limit,\n                    offset: 0\n                });\n            }\n        }));\n    }\n    /**\n     * Lifecycle hook that is called after a component's\n     * content has been fully initialized.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.columnTemplates.changes.subscribe((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => this.translateColumns(v)));\n        this.listenForColumnInputChanges();\n    }\n    /**\n     * Translates the templates to the column objects\n     * @param {?} val\n     * @return {?}\n     */\n    translateColumns(val) {\n        if (val) {\n            /** @type {?} */\n            const arr = val.toArray();\n            if (arr.length) {\n                this._internalColumns = translateTemplates(arr);\n                setColumnDefaults(this._internalColumns);\n                this.recalculateColumns();\n                this.sortInternalRows();\n                this.cd.markForCheck();\n            }\n        }\n    }\n    /**\n     * Creates a map with the data grouped by the user choice of grouping index\n     *\n     * @param {?} originalArray the original array passed via parameter\n     * @param {?} groupBy\n     * @return {?}\n     */\n    groupArrayBy(originalArray, groupBy) {\n        // create a map to hold groups with their corresponding results\n        /** @type {?} */\n        const map = new Map();\n        /** @type {?} */\n        let i = 0;\n        originalArray.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => {\n            /** @type {?} */\n            const key = item[groupBy];\n            if (!map.has(key)) {\n                map.set(key, [item]);\n            }\n            else {\n                map.get(key).push(item);\n            }\n            i++;\n        }));\n        /** @type {?} */\n        const addGroup = (/**\n         * @param {?} key\n         * @param {?} value\n         * @return {?}\n         */\n        (key, value) => {\n            return { key, value };\n        });\n        // convert map back to a simple array of objects\n        return Array.from(map, (/**\n         * @param {?} x\n         * @return {?}\n         */\n        x => addGroup(x[0], x[1])));\n    }\n    /*\n       * Lifecycle hook that is called when Angular dirty checks a directive.\n       */\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.rowDiffer.diff(this.rows)) {\n            if (!this.externalSorting) {\n                this.sortInternalRows();\n            }\n            else {\n                this._internalRows = [...this.rows];\n            }\n            // auto group by parent on new update\n            this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n            this.recalculatePages();\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * Recalc's the sizes of the grid.\n     *\n     * Updated automatically on changes to:\n     *\n     *  - Columns\n     *  - Rows\n     *  - Paging related\n     *\n     * Also can be manually invoked or upon window resize.\n     * @return {?}\n     */\n    recalculate() {\n        this.recalculateDims();\n        this.recalculateColumns();\n    }\n    /**\n     * Window resize handler to update sizes.\n     * @return {?}\n     */\n    onWindowResize() {\n        this.recalculate();\n    }\n    /**\n     * Recalulcates the column widths based on column width\n     * distribution mode and scrollbar offsets.\n     * @param {?=} columns\n     * @param {?=} forceIdx\n     * @param {?=} allowBleed\n     * @return {?}\n     */\n    recalculateColumns(columns = this._internalColumns, forceIdx = -1, allowBleed = this.scrollbarH) {\n        if (!columns)\n            return undefined;\n        /** @type {?} */\n        let width = this._innerWidth;\n        if (this.scrollbarV) {\n            width = width - this.scrollbarHelper.width;\n        }\n        if (this.columnMode === ColumnMode.force) {\n            forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n        }\n        else if (this.columnMode === ColumnMode.flex) {\n            adjustColumnWidths(columns, width);\n        }\n        return columns;\n    }\n    /**\n     * Recalculates the dimensions of the table size.\n     * Internally calls the page size and row count calcs too.\n     *\n     * @return {?}\n     */\n    recalculateDims() {\n        /** @type {?} */\n        const dims = this.dimensionsHelper.getDimensions(this.element);\n        this._innerWidth = Math.floor(dims.width);\n        if (this.scrollbarV) {\n            /** @type {?} */\n            let height = dims.height;\n            if (this.headerHeight)\n                height = height - this.headerHeight;\n            if (this.footerHeight)\n                height = height - this.footerHeight;\n            this.bodyHeight = height;\n        }\n        this.recalculatePages();\n    }\n    /**\n     * Recalculates the pages after a update.\n     * @return {?}\n     */\n    recalculatePages() {\n        this.pageSize = this.calcPageSize();\n        this.rowCount = this.calcRowCount();\n    }\n    /**\n     * Body triggered a page event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onBodyPage({ offset }) {\n        // Avoid pagination caming from body events like scroll when the table\n        // has no virtualization and the external paging is enable.\n        // This means, let's the developer handle pagination by my him(her) self\n        if (this.externalPaging && !this.virtualization) {\n            return;\n        }\n        this.offset = offset;\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n    }\n    /**\n     * The body triggered a scroll event.\n     * @param {?} event\n     * @return {?}\n     */\n    onBodyScroll(event) {\n        this._offsetX.next(event.offsetX);\n        this.scroll.emit(event);\n        this.cd.detectChanges();\n    }\n    /**\n     * The footer triggered a page event.\n     * @param {?} event\n     * @return {?}\n     */\n    onFooterPage(event) {\n        this.offset = event.page - 1;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n    }\n    /**\n     * Recalculates the sizes of the page\n     * @param {?=} val\n     * @return {?}\n     */\n    calcPageSize(val = this.rows) {\n        // Keep the page size constant even if the row has been expanded.\n        // This is because an expanded row is still considered to be a child of\n        // the original row.  Hence calculation would use rowHeight only.\n        if (this.scrollbarV && this.virtualization) {\n            /** @type {?} */\n            const size = Math.ceil(this.bodyHeight / ((/** @type {?} */ (this.rowHeight))));\n            return Math.max(size, 0);\n        }\n        // if limit is passed, we are paging\n        if (this.limit !== undefined) {\n            return this.limit;\n        }\n        // otherwise use row length\n        if (val) {\n            return val.length;\n        }\n        // other empty :(\n        return 0;\n    }\n    /**\n     * Calculates the row count.\n     * @param {?=} val\n     * @return {?}\n     */\n    calcRowCount(val = this.rows) {\n        if (!this.externalPaging) {\n            if (!val)\n                return 0;\n            if (this.groupedRows) {\n                return this.groupedRows.length;\n            }\n            else if (this.treeFromRelation != null && this.treeToRelation != null) {\n                return this._internalRows.length;\n            }\n            else {\n                return val.length;\n            }\n        }\n        return this.count;\n    }\n    /**\n     * The header triggered a contextmenu event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onColumnContextmenu({ event, column }) {\n        this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n    }\n    /**\n     * The body triggered a contextmenu event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onRowContextmenu({ event, row }) {\n        this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n    }\n    /**\n     * The header triggered a column resize event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onColumnResize({ column, newValue }) {\n        /* Safari/iOS 10.2 workaround */\n        if (column === undefined) {\n            return;\n        }\n        /** @type {?} */\n        let idx;\n        /** @type {?} */\n        const cols = this._internalColumns.map((/**\n         * @param {?} c\n         * @param {?} i\n         * @return {?}\n         */\n        (c, i) => {\n            c = Object.assign({}, c);\n            if (c.$$id === column.$$id) {\n                idx = i;\n                c.width = newValue;\n                // set this so we can force the column\n                // width distribution to be to this value\n                c.$$oldWidth = newValue;\n            }\n            return c;\n        }));\n        this.recalculateColumns(cols, idx);\n        this._internalColumns = cols;\n        this.resize.emit({\n            column,\n            newValue\n        });\n    }\n    /**\n     * The header triggered a column re-order event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onColumnReorder({ column, newValue, prevValue }) {\n        /** @type {?} */\n        const cols = this._internalColumns.map((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => {\n            return Object.assign({}, c);\n        }));\n        if (this.swapColumns) {\n            /** @type {?} */\n            const prevCol = cols[newValue];\n            cols[newValue] = column;\n            cols[prevValue] = prevCol;\n        }\n        else {\n            if (newValue > prevValue) {\n                /** @type {?} */\n                const movedCol = cols[prevValue];\n                for (let i = prevValue; i < newValue; i++) {\n                    cols[i] = cols[i + 1];\n                }\n                cols[newValue] = movedCol;\n            }\n            else {\n                /** @type {?} */\n                const movedCol = cols[prevValue];\n                for (let i = prevValue; i > newValue; i--) {\n                    cols[i] = cols[i - 1];\n                }\n                cols[newValue] = movedCol;\n            }\n        }\n        this._internalColumns = cols;\n        this.reorder.emit({\n            column,\n            newValue,\n            prevValue\n        });\n    }\n    /**\n     * The header triggered a column sort event.\n     * @param {?} event\n     * @return {?}\n     */\n    onColumnSort(event) {\n        // clean selected rows\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n        this.sorts = event.sorts;\n        // this could be optimized better since it will resort\n        // the rows again on the 'push' detection...\n        if (this.externalSorting === false) {\n            // don't use normal setter so we don't resort\n            this.sortInternalRows();\n        }\n        // auto group by parent on new update\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n        // Always go to first page when sorting to see the newly sorted data\n        this.offset = 0;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.sort.emit(event);\n    }\n    /**\n     * Toggle all row selection\n     * @param {?} event\n     * @return {?}\n     */\n    onHeaderSelect(event) {\n        if (this.selectAllRowsOnPage) {\n            // before we splice, chk if we currently have all selected\n            /** @type {?} */\n            const first = this.bodyComponent.indexes.first;\n            /** @type {?} */\n            const last = this.bodyComponent.indexes.last;\n            /** @type {?} */\n            const allSelected = this.selected.length === last - first;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                this.selected.push(...this._internalRows.slice(first, last));\n            }\n        }\n        else {\n            // before we splice, chk if we currently have all selected\n            /** @type {?} */\n            const allSelected = this.selected.length === this.rows.length;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                this.selected.push(...this.rows);\n            }\n        }\n        this.select.emit({\n            selected: this.selected\n        });\n    }\n    /**\n     * A row was selected from body\n     * @param {?} event\n     * @return {?}\n     */\n    onBodySelect(event) {\n        this.select.emit(event);\n    }\n    /**\n     * A row was expanded or collapsed for tree\n     * @param {?} event\n     * @return {?}\n     */\n    onTreeAction(event) {\n        /** @type {?} */\n        const row = event.row;\n        // TODO: For duplicated items this will not work\n        /** @type {?} */\n        const rowIndex = this._rows.findIndex((/**\n         * @param {?} r\n         * @return {?}\n         */\n        r => r[this.treeToRelation] === event.row[this.treeToRelation]));\n        this.treeAction.emit({ row, rowIndex });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._subscriptions.forEach((/**\n         * @param {?} subscription\n         * @return {?}\n         */\n        subscription => subscription.unsubscribe()));\n    }\n    /**\n     * listen for changes to input bindings of all DataTableColumnDirective and\n     * trigger the columnTemplates.changes observable to emit\n     * @private\n     * @return {?}\n     */\n    listenForColumnInputChanges() {\n        this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.columnTemplates) {\n                this.columnTemplates.notifyOnChanges();\n            }\n        })));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    sortInternalRows() {\n        this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n    }\n}\nDatatableComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-datatable',\n                template: \"<div visibilityObserver (visible)=\\\"recalculate()\\\">\\n  <datatable-header\\n    *ngIf=\\\"headerHeight\\\"\\n    [sorts]=\\\"sorts\\\"\\n    [sortType]=\\\"sortType\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [dealsWithGroup]=\\\"groupedRows !== undefined\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [headerHeight]=\\\"headerHeight\\\"\\n    [reorderable]=\\\"reorderable\\\"\\n    [targetMarkerTemplate]=\\\"targetMarkerTemplate\\\"\\n    [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n    [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n    [allRowsSelected]=\\\"allRowsSelected\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    (sort)=\\\"onColumnSort($event)\\\"\\n    (resize)=\\\"onColumnResize($event)\\\"\\n    (reorder)=\\\"onColumnReorder($event)\\\"\\n    (select)=\\\"onHeaderSelect($event)\\\"\\n    (columnContextmenu)=\\\"onColumnContextmenu($event)\\\"\\n  >\\n  </datatable-header>\\n  <datatable-body\\n    [groupRowsBy]=\\\"groupRowsBy\\\"\\n    [groupedRows]=\\\"groupedRows\\\"\\n    [rows]=\\\"_internalRows\\\"\\n    [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n    [scrollbarV]=\\\"scrollbarV\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [virtualization]=\\\"virtualization\\\"\\n    [loadingIndicator]=\\\"loadingIndicator\\\"\\n    [externalPaging]=\\\"externalPaging\\\"\\n    [rowHeight]=\\\"rowHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [offset]=\\\"offset\\\"\\n    [trackByProp]=\\\"trackByProp\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [rowDetail]=\\\"rowDetail\\\"\\n    [groupHeader]=\\\"groupHeader\\\"\\n    [selected]=\\\"selected\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [bodyHeight]=\\\"bodyHeight\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    [emptyMessage]=\\\"messages.emptyMessage\\\"\\n    [rowIdentity]=\\\"rowIdentity\\\"\\n    [rowClass]=\\\"rowClass\\\"\\n    [selectCheck]=\\\"selectCheck\\\"\\n    [displayCheck]=\\\"displayCheck\\\"\\n    [summaryRow]=\\\"summaryRow\\\"\\n    [summaryHeight]=\\\"summaryHeight\\\"\\n    [summaryPosition]=\\\"summaryPosition\\\"\\n    (page)=\\\"onBodyPage($event)\\\"\\n    (activate)=\\\"activate.emit($event)\\\"\\n    (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n    (select)=\\\"onBodySelect($event)\\\"\\n    (scroll)=\\\"onBodyScroll($event)\\\"\\n    (treeAction)=\\\"onTreeAction($event)\\\"\\n  >\\n  </datatable-body>\\n  <datatable-footer\\n    *ngIf=\\\"footerHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offset]=\\\"offset\\\"\\n    [footerHeight]=\\\"footerHeight\\\"\\n    [footerTemplate]=\\\"footer\\\"\\n    [totalMessage]=\\\"messages.totalMessage\\\"\\n    [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n    [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n    [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n    [selectedCount]=\\\"selected.length\\\"\\n    [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n    [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n    (page)=\\\"onFooterPage($event)\\\"\\n  >\\n  </datatable-footer>\\n</div>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    class: 'ngx-datatable'\n                },\n                styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;-webkit-transform:translate3d(0,0,0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:0}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:0}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:0}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\"]\n            }] }\n];\n/** @nocollapse */\nDatatableComponent.ctorParameters = () => [\n    { type: ScrollbarHelper, decorators: [{ type: SkipSelf }] },\n    { type: DimensionsHelper, decorators: [{ type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: KeyValueDiffers },\n    { type: ColumnChangesService },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['configuration',] }] }\n];\nDatatableComponent.propDecorators = {\n    targetMarkerTemplate: [{ type: Input }],\n    rows: [{ type: Input }],\n    groupRowsBy: [{ type: Input }],\n    groupedRows: [{ type: Input }],\n    columns: [{ type: Input }],\n    selected: [{ type: Input }],\n    scrollbarV: [{ type: Input }],\n    scrollbarH: [{ type: Input }],\n    rowHeight: [{ type: Input }],\n    columnMode: [{ type: Input }],\n    headerHeight: [{ type: Input }],\n    footerHeight: [{ type: Input }],\n    externalPaging: [{ type: Input }],\n    externalSorting: [{ type: Input }],\n    limit: [{ type: Input }],\n    count: [{ type: Input }],\n    offset: [{ type: Input }],\n    loadingIndicator: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    reorderable: [{ type: Input }],\n    swapColumns: [{ type: Input }],\n    sortType: [{ type: Input }],\n    sorts: [{ type: Input }],\n    cssClasses: [{ type: Input }],\n    messages: [{ type: Input }],\n    rowClass: [{ type: Input }],\n    selectCheck: [{ type: Input }],\n    displayCheck: [{ type: Input }],\n    groupExpansionDefault: [{ type: Input }],\n    trackByProp: [{ type: Input }],\n    selectAllRowsOnPage: [{ type: Input }],\n    virtualization: [{ type: Input }],\n    treeFromRelation: [{ type: Input }],\n    treeToRelation: [{ type: Input }],\n    summaryRow: [{ type: Input }],\n    summaryHeight: [{ type: Input }],\n    summaryPosition: [{ type: Input }],\n    scroll: [{ type: Output }],\n    activate: [{ type: Output }],\n    select: [{ type: Output }],\n    sort: [{ type: Output }],\n    page: [{ type: Output }],\n    reorder: [{ type: Output }],\n    resize: [{ type: Output }],\n    tableContextmenu: [{ type: Output }],\n    treeAction: [{ type: Output }],\n    isFixedHeader: [{ type: HostBinding, args: ['class.fixed-header',] }],\n    isFixedRow: [{ type: HostBinding, args: ['class.fixed-row',] }],\n    isVertScroll: [{ type: HostBinding, args: ['class.scroll-vertical',] }],\n    isVirtualized: [{ type: HostBinding, args: ['class.virtualized',] }],\n    isHorScroll: [{ type: HostBinding, args: ['class.scroll-horz',] }],\n    isSelectable: [{ type: HostBinding, args: ['class.selectable',] }],\n    isCheckboxSelection: [{ type: HostBinding, args: ['class.checkbox-selection',] }],\n    isCellSelection: [{ type: HostBinding, args: ['class.cell-selection',] }],\n    isSingleSelection: [{ type: HostBinding, args: ['class.single-selection',] }],\n    isMultiSelection: [{ type: HostBinding, args: ['class.multi-selection',] }],\n    isMultiClickSelection: [{ type: HostBinding, args: ['class.multi-click-selection',] }],\n    columnTemplates: [{ type: ContentChildren, args: [DataTableColumnDirective,] }],\n    rowDetail: [{ type: ContentChild, args: [DatatableRowDetailDirective, { static: false },] }],\n    groupHeader: [{ type: ContentChild, args: [DatatableGroupHeaderDirective, { static: false },] }],\n    footer: [{ type: ContentChild, args: [DatatableFooterDirective, { static: false },] }],\n    bodyComponent: [{ type: ViewChild, args: [DataTableBodyComponent, { static: false },] }],\n    headerComponent: [{ type: ViewChild, args: [DataTableHeaderComponent, { static: false },] }],\n    rowIdentity: [{ type: Input }],\n    onWindowResize: [{ type: HostListener, args: ['window:resize',] }]\n};\n__decorate([\n    throttleable(5),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], DatatableComponent.prototype, \"onWindowResize\", null);\nif (false) {\n    /**\n     * Template for the target marker of drag target columns.\n     * @type {?}\n     */\n    DatatableComponent.prototype.targetMarkerTemplate;\n    /**\n     * This attribute allows the user to set a grouped array in the following format:\n     *  [\n     *    {groupid=1} [\n     *      {id=1 name=\"test1\"},\n     *      {id=2 name=\"test2\"},\n     *      {id=3 name=\"test3\"}\n     *    ]},\n     *    {groupid=2>[\n     *      {id=4 name=\"test4\"},\n     *      {id=5 name=\"test5\"},\n     *      {id=6 name=\"test6\"}\n     *    ]}\n     *  ]\n     * @type {?}\n     */\n    DatatableComponent.prototype.groupedRows;\n    /**\n     * List of row objects that should be\n     * represented as selected in the grid.\n     * Default value: `[]`\n     * @type {?}\n     */\n    DatatableComponent.prototype.selected;\n    /**\n     * Enable vertical scrollbars\n     * @type {?}\n     */\n    DatatableComponent.prototype.scrollbarV;\n    /**\n     * Enable horz scrollbars\n     * @type {?}\n     */\n    DatatableComponent.prototype.scrollbarH;\n    /**\n     * The row height; which is necessary\n     * to calculate the height for the lazy rendering.\n     * @type {?}\n     */\n    DatatableComponent.prototype.rowHeight;\n    /**\n     * Type of column width distribution formula.\n     * Example: flex, force, standard\n     * @type {?}\n     */\n    DatatableComponent.prototype.columnMode;\n    /**\n     * The minimum header height in pixels.\n     * Pass a falsey for no header\n     * @type {?}\n     */\n    DatatableComponent.prototype.headerHeight;\n    /**\n     * The minimum footer height in pixels.\n     * Pass falsey for no footer\n     * @type {?}\n     */\n    DatatableComponent.prototype.footerHeight;\n    /**\n     * If the table should use external paging\n     * otherwise its assumed that all data is preloaded.\n     * @type {?}\n     */\n    DatatableComponent.prototype.externalPaging;\n    /**\n     * If the table should use external sorting or\n     * the built-in basic sorting.\n     * @type {?}\n     */\n    DatatableComponent.prototype.externalSorting;\n    /**\n     * Show the linear loading bar.\n     * Default value: `false`\n     * @type {?}\n     */\n    DatatableComponent.prototype.loadingIndicator;\n    /**\n     * Type of row selection. Options are:\n     *\n     *  - `single`\n     *  - `multi`\n     *  - `checkbox`\n     *  - `multiClick`\n     *  - `cell`\n     *\n     * For no selection pass a `falsey`.\n     * Default value: `undefined`\n     * @type {?}\n     */\n    DatatableComponent.prototype.selectionType;\n    /**\n     * Enable/Disable ability to re-order columns\n     * by dragging them.\n     * @type {?}\n     */\n    DatatableComponent.prototype.reorderable;\n    /**\n     * Swap columns on re-order columns or\n     * move them.\n     * @type {?}\n     */\n    DatatableComponent.prototype.swapColumns;\n    /**\n     * The type of sorting\n     * @type {?}\n     */\n    DatatableComponent.prototype.sortType;\n    /**\n     * Array of sorted columns by property and type.\n     * Default value: `[]`\n     * @type {?}\n     */\n    DatatableComponent.prototype.sorts;\n    /**\n     * Css class overrides\n     * @type {?}\n     */\n    DatatableComponent.prototype.cssClasses;\n    /**\n     * Message overrides for localization\n     *\n     * emptyMessage     [default] = 'No data to display'\n     * totalMessage     [default] = 'total'\n     * selectedMessage  [default] = 'selected'\n     * @type {?}\n     */\n    DatatableComponent.prototype.messages;\n    /**\n     * Row specific classes.\n     * Similar implementation to ngClass.\n     *\n     *  [rowClass]=\"'first second'\"\n     *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\n     * @type {?}\n     */\n    DatatableComponent.prototype.rowClass;\n    /**\n     * A boolean/function you can use to check whether you want\n     * to select a particular row based on a criteria. Example:\n     *\n     *    (selection) => {\n     *      return selection !== 'Ethel Price';\n     *    }\n     * @type {?}\n     */\n    DatatableComponent.prototype.selectCheck;\n    /**\n     * A function you can use to check whether you want\n     * to show the checkbox for a particular row based on a criteria. Example:\n     *\n     *    (row, column, value) => {\n     *      return row.name !== 'Ethel Price';\n     *    }\n     * @type {?}\n     */\n    DatatableComponent.prototype.displayCheck;\n    /**\n     * A boolean you can use to set the detault behaviour of rows and groups\n     * whether they will start expanded or not. If ommited the default is NOT expanded.\n     *\n     * @type {?}\n     */\n    DatatableComponent.prototype.groupExpansionDefault;\n    /**\n     * Property to which you can use for custom tracking of rows.\n     * Example: 'name'\n     * @type {?}\n     */\n    DatatableComponent.prototype.trackByProp;\n    /**\n     * Property to which you can use for determining select all\n     * rows on current page or not.\n     *\n     * \\@memberOf DatatableComponent\n     * @type {?}\n     */\n    DatatableComponent.prototype.selectAllRowsOnPage;\n    /**\n     * A flag for row virtualization on / off\n     * @type {?}\n     */\n    DatatableComponent.prototype.virtualization;\n    /**\n     * Tree from relation\n     * @type {?}\n     */\n    DatatableComponent.prototype.treeFromRelation;\n    /**\n     * Tree to relation\n     * @type {?}\n     */\n    DatatableComponent.prototype.treeToRelation;\n    /**\n     * A flag for switching summary row on / off\n     * @type {?}\n     */\n    DatatableComponent.prototype.summaryRow;\n    /**\n     * A height of summary row\n     * @type {?}\n     */\n    DatatableComponent.prototype.summaryHeight;\n    /**\n     * A property holds a summary row position: top/bottom\n     * @type {?}\n     */\n    DatatableComponent.prototype.summaryPosition;\n    /**\n     * Body was scrolled typically in a `scrollbarV:true` scenario.\n     * @type {?}\n     */\n    DatatableComponent.prototype.scroll;\n    /**\n     * A cell or row was focused via keyboard or mouse click.\n     * @type {?}\n     */\n    DatatableComponent.prototype.activate;\n    /**\n     * A cell or row was selected.\n     * @type {?}\n     */\n    DatatableComponent.prototype.select;\n    /**\n     * Column sort was invoked.\n     * @type {?}\n     */\n    DatatableComponent.prototype.sort;\n    /**\n     * The table was paged either triggered by the pager or the body scroll.\n     * @type {?}\n     */\n    DatatableComponent.prototype.page;\n    /**\n     * Columns were re-ordered.\n     * @type {?}\n     */\n    DatatableComponent.prototype.reorder;\n    /**\n     * Column was resized.\n     * @type {?}\n     */\n    DatatableComponent.prototype.resize;\n    /**\n     * The context menu was invoked on the table.\n     * type indicates whether the header or the body was clicked.\n     * content contains either the column or the row that was clicked.\n     * @type {?}\n     */\n    DatatableComponent.prototype.tableContextmenu;\n    /**\n     * A row was expanded ot collapsed for tree\n     * @type {?}\n     */\n    DatatableComponent.prototype.treeAction;\n    /**\n     * Row Detail templates gathered from the ContentChild\n     * @type {?}\n     */\n    DatatableComponent.prototype.rowDetail;\n    /**\n     * Group Header templates gathered from the ContentChild\n     * @type {?}\n     */\n    DatatableComponent.prototype.groupHeader;\n    /**\n     * Footer template gathered from the ContentChild\n     * @type {?}\n     */\n    DatatableComponent.prototype.footer;\n    /**\n     * Reference to the body component for manually\n     * invoking functions on the body.\n     * @type {?}\n     */\n    DatatableComponent.prototype.bodyComponent;\n    /**\n     * Reference to the header component for manually\n     * invoking functions on the header.\n     *\n     * \\@memberOf DatatableComponent\n     * @type {?}\n     */\n    DatatableComponent.prototype.headerComponent;\n    /** @type {?} */\n    DatatableComponent.prototype.element;\n    /** @type {?} */\n    DatatableComponent.prototype._innerWidth;\n    /** @type {?} */\n    DatatableComponent.prototype.pageSize;\n    /** @type {?} */\n    DatatableComponent.prototype.bodyHeight;\n    /** @type {?} */\n    DatatableComponent.prototype.rowCount;\n    /** @type {?} */\n    DatatableComponent.prototype.rowDiffer;\n    /** @type {?} */\n    DatatableComponent.prototype._offsetX;\n    /** @type {?} */\n    DatatableComponent.prototype._limit;\n    /** @type {?} */\n    DatatableComponent.prototype._count;\n    /** @type {?} */\n    DatatableComponent.prototype._offset;\n    /** @type {?} */\n    DatatableComponent.prototype._rows;\n    /** @type {?} */\n    DatatableComponent.prototype._groupRowsBy;\n    /** @type {?} */\n    DatatableComponent.prototype._internalRows;\n    /** @type {?} */\n    DatatableComponent.prototype._internalColumns;\n    /** @type {?} */\n    DatatableComponent.prototype._columns;\n    /** @type {?} */\n    DatatableComponent.prototype._columnTemplates;\n    /** @type {?} */\n    DatatableComponent.prototype._subscriptions;\n    /**\n     * This will be used when displaying or selecting rows.\n     * when tracking/comparing them, we'll use the value of this fn,\n     *\n     * (`fn(x) === fn(y)` instead of `x === y`)\n     * @type {?}\n     */\n    DatatableComponent.prototype.rowIdentity;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.scrollbarHelper;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.dimensionsHelper;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.cd;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.columnChangesService;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.configuration;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableHeaderCellComponent {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) {\n        this.cd = cd;\n        this.sort = new EventEmitter();\n        this.select = new EventEmitter();\n        this.columnContextmenu = new EventEmitter(false);\n        this.sortFn = this.onSort.bind(this);\n        this.selectFn = this.select.emit.bind(this.select);\n        this.cellContext = {\n            column: this.column,\n            sortDir: this.sortDir,\n            sortFn: this.sortFn,\n            allRowsSelected: this.allRowsSelected,\n            selectFn: this.selectFn\n        };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set allRowsSelected(value) {\n        this._allRowsSelected = value;\n        this.cellContext.allRowsSelected = value;\n    }\n    /**\n     * @return {?}\n     */\n    get allRowsSelected() {\n        return this._allRowsSelected;\n    }\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    set column(column) {\n        this._column = column;\n        this.cellContext.column = column;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get column() {\n        return this._column;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set sorts(val) {\n        this._sorts = val;\n        this.sortDir = this.calcSortDir(val);\n        this.cellContext.sortDir = this.sortDir;\n        this.sortClass = this.calcSortClass(this.sortDir);\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get sorts() {\n        return this._sorts;\n    }\n    /**\n     * @return {?}\n     */\n    get columnCssClasses() {\n        /** @type {?} */\n        let cls = 'datatable-header-cell';\n        if (this.column.sortable)\n            cls += ' sortable';\n        if (this.column.resizeable)\n            cls += ' resizeable';\n        if (this.column.headerClass) {\n            if (typeof this.column.headerClass === 'string') {\n                cls += ' ' + this.column.headerClass;\n            }\n            else if (typeof this.column.headerClass === 'function') {\n                /** @type {?} */\n                const res = this.column.headerClass({\n                    column: this.column\n                });\n                if (typeof res === 'string') {\n                    cls += res;\n                }\n                else if (typeof res === 'object') {\n                    /** @type {?} */\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true)\n                            cls += ` ${k}`;\n                    }\n                }\n            }\n        }\n        /** @type {?} */\n        const sortDir = this.sortDir;\n        if (sortDir) {\n            cls += ` sort-active sort-${sortDir}`;\n        }\n        return cls;\n    }\n    /**\n     * @return {?}\n     */\n    get name() {\n        // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n        return this.column.headerTemplate === undefined ? this.column.name : undefined;\n    }\n    /**\n     * @return {?}\n     */\n    get minWidth() {\n        return this.column.minWidth;\n    }\n    /**\n     * @return {?}\n     */\n    get maxWidth() {\n        return this.column.maxWidth;\n    }\n    /**\n     * @return {?}\n     */\n    get width() {\n        return this.column.width;\n    }\n    /**\n     * @return {?}\n     */\n    get isCheckboxable() {\n        return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onContextmenu($event) {\n        this.columnContextmenu.emit({ event: $event, column: this.column });\n    }\n    /**\n     * @param {?} sorts\n     * @return {?}\n     */\n    calcSortDir(sorts) {\n        if (sorts && this.column) {\n            /** @type {?} */\n            const sort = sorts.find((/**\n             * @param {?} s\n             * @return {?}\n             */\n            (s) => {\n                return s.prop === this.column.prop;\n            }));\n            if (sort)\n                return sort.dir;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onSort() {\n        if (!this.column.sortable)\n            return;\n        /** @type {?} */\n        const newValue = nextSortDir(this.sortType, this.sortDir);\n        this.sort.emit({\n            column: this.column,\n            prevValue: this.sortDir,\n            newValue\n        });\n    }\n    /**\n     * @param {?} sortDir\n     * @return {?}\n     */\n    calcSortClass(sortDir) {\n        if (sortDir === SortDirection.asc) {\n            return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n        }\n        else if (sortDir === SortDirection.desc) {\n            return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n        }\n        else {\n            return `sort-btn`;\n        }\n    }\n}\nDataTableHeaderCellComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-header-cell',\n                template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `,\n                host: {\n                    class: 'datatable-header-cell'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nDataTableHeaderCellComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nDataTableHeaderCellComponent.propDecorators = {\n    sortType: [{ type: Input }],\n    sortAscendingIcon: [{ type: Input }],\n    sortDescendingIcon: [{ type: Input }],\n    isTarget: [{ type: Input }],\n    targetMarkerTemplate: [{ type: Input }],\n    targetMarkerContext: [{ type: Input }],\n    allRowsSelected: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    column: [{ type: Input }],\n    headerHeight: [{ type: HostBinding, args: ['style.height.px',] }, { type: Input }],\n    sorts: [{ type: Input }],\n    sort: [{ type: Output }],\n    select: [{ type: Output }],\n    columnContextmenu: [{ type: Output }],\n    columnCssClasses: [{ type: HostBinding, args: ['class',] }],\n    name: [{ type: HostBinding, args: ['attr.title',] }],\n    minWidth: [{ type: HostBinding, args: ['style.minWidth.px',] }],\n    maxWidth: [{ type: HostBinding, args: ['style.maxWidth.px',] }],\n    width: [{ type: HostBinding, args: ['style.width.px',] }],\n    onContextmenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortType;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortAscendingIcon;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortDescendingIcon;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.isTarget;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.targetMarkerTemplate;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.targetMarkerContext;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype._allRowsSelected;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.selectionType;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.headerHeight;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sort;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.select;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.columnContextmenu;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortFn;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortClass;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortDir;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.selectFn;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.cellContext;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderCellComponent.prototype._column;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderCellComponent.prototype._sorts;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderCellComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableFooterComponent {\n    constructor() {\n        this.selectedCount = 0;\n        this.page = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    get isVisible() {\n        return this.rowCount / this.pageSize > 1;\n    }\n    /**\n     * @return {?}\n     */\n    get curPage() {\n        return this.offset + 1;\n    }\n}\nDataTableFooterComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-footer',\n                template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `,\n                host: {\n                    class: 'datatable-footer'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\nDataTableFooterComponent.propDecorators = {\n    footerHeight: [{ type: Input }],\n    rowCount: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    offset: [{ type: Input }],\n    pagerLeftArrowIcon: [{ type: Input }],\n    pagerRightArrowIcon: [{ type: Input }],\n    pagerPreviousIcon: [{ type: Input }],\n    pagerNextIcon: [{ type: Input }],\n    totalMessage: [{ type: Input }],\n    footerTemplate: [{ type: Input }],\n    selectedCount: [{ type: Input }],\n    selectedMessage: [{ type: Input }],\n    page: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableFooterComponent.prototype.footerHeight;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.rowCount;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pageSize;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.offset;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pagerLeftArrowIcon;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pagerRightArrowIcon;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pagerPreviousIcon;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pagerNextIcon;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.totalMessage;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.footerTemplate;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.selectedCount;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.selectedMessage;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.page;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTablePagerComponent {\n    constructor() {\n        this.change = new EventEmitter();\n        this._count = 0;\n        this._page = 1;\n        this._size = 0;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set size(val) {\n        this._size = val;\n        this.pages = this.calcPages();\n    }\n    /**\n     * @return {?}\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set count(val) {\n        this._count = val;\n        this.pages = this.calcPages();\n    }\n    /**\n     * @return {?}\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set page(val) {\n        this._page = val;\n        this.pages = this.calcPages();\n    }\n    /**\n     * @return {?}\n     */\n    get page() {\n        return this._page;\n    }\n    /**\n     * @return {?}\n     */\n    get totalPages() {\n        /** @type {?} */\n        const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\n        return Math.max(count || 0, 1);\n    }\n    /**\n     * @return {?}\n     */\n    canPrevious() {\n        return this.page > 1;\n    }\n    /**\n     * @return {?}\n     */\n    canNext() {\n        return this.page < this.totalPages;\n    }\n    /**\n     * @return {?}\n     */\n    prevPage() {\n        this.selectPage(this.page - 1);\n    }\n    /**\n     * @return {?}\n     */\n    nextPage() {\n        this.selectPage(this.page + 1);\n    }\n    /**\n     * @param {?} page\n     * @return {?}\n     */\n    selectPage(page) {\n        if (page > 0 && page <= this.totalPages && page !== this.page) {\n            this.page = page;\n            this.change.emit({\n                page\n            });\n        }\n    }\n    /**\n     * @param {?=} page\n     * @return {?}\n     */\n    calcPages(page) {\n        /** @type {?} */\n        const pages = [];\n        /** @type {?} */\n        let startPage = 1;\n        /** @type {?} */\n        let endPage = this.totalPages;\n        /** @type {?} */\n        const maxSize = 5;\n        /** @type {?} */\n        const isMaxSized = maxSize < this.totalPages;\n        page = page || this.page;\n        if (isMaxSized) {\n            startPage = page - Math.floor(maxSize / 2);\n            endPage = page + Math.floor(maxSize / 2);\n            if (startPage < 1) {\n                startPage = 1;\n                endPage = Math.min(startPage + maxSize - 1, this.totalPages);\n            }\n            else if (endPage > this.totalPages) {\n                startPage = Math.max(this.totalPages - maxSize + 1, 1);\n                endPage = this.totalPages;\n            }\n        }\n        for (let num = startPage; num <= endPage; num++) {\n            pages.push({\n                number: num,\n                text: (/** @type {?} */ (((/** @type {?} */ (num)))))\n            });\n        }\n        return pages;\n    }\n}\nDataTablePagerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-pager',\n                template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `,\n                host: {\n                    class: 'datatable-pager'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\nDataTablePagerComponent.propDecorators = {\n    pagerLeftArrowIcon: [{ type: Input }],\n    pagerRightArrowIcon: [{ type: Input }],\n    pagerPreviousIcon: [{ type: Input }],\n    pagerNextIcon: [{ type: Input }],\n    size: [{ type: Input }],\n    count: [{ type: Input }],\n    page: [{ type: Input }],\n    change: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pagerLeftArrowIcon;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pagerRightArrowIcon;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pagerPreviousIcon;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pagerNextIcon;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.change;\n    /** @type {?} */\n    DataTablePagerComponent.prototype._count;\n    /** @type {?} */\n    DataTablePagerComponent.prototype._page;\n    /** @type {?} */\n    DataTablePagerComponent.prototype._size;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pages;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ProgressBarComponent {\n}\nProgressBarComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-progress',\n                template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst Keys = {\n    up: 38,\n    down: 40,\n    return: 13,\n    escape: 27,\n    left: 37,\n    right: 39,\n};\nKeys[Keys.up] = 'up';\nKeys[Keys.down] = 'down';\nKeys[Keys.return] = 'return';\nKeys[Keys.escape] = 'escape';\nKeys[Keys.left] = 'left';\nKeys[Keys.right] = 'right';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableBodyRowComponent {\n    /**\n     * @param {?} differs\n     * @param {?} scrollbarHelper\n     * @param {?} cd\n     * @param {?} element\n     */\n    constructor(differs, scrollbarHelper, cd, element) {\n        this.differs = differs;\n        this.scrollbarHelper = scrollbarHelper;\n        this.cd = cd;\n        this.treeStatus = 'collapsed';\n        this.activate = new EventEmitter();\n        this.treeAction = new EventEmitter();\n        this._groupStyles = {\n            left: {},\n            center: {},\n            right: {}\n        };\n        this._element = element.nativeElement;\n        this._rowDiffer = differs.find({}).create();\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set columns(val) {\n        this._columns = val;\n        this.recalculateColumns(val);\n        this.buildStylesByGroup();\n    }\n    /**\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set innerWidth(val) {\n        if (this._columns) {\n            /** @type {?} */\n            const colByPin = columnsByPin(this._columns);\n            this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n        }\n        this._innerWidth = val;\n        this.recalculateColumns();\n        this.buildStylesByGroup();\n    }\n    /**\n     * @return {?}\n     */\n    get innerWidth() {\n        return this._innerWidth;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set offsetX(val) {\n        this._offsetX = val;\n        this.buildStylesByGroup();\n    }\n    /**\n     * @return {?}\n     */\n    get offsetX() {\n        return this._offsetX;\n    }\n    /**\n     * @return {?}\n     */\n    get cssClass() {\n        /** @type {?} */\n        let cls = 'datatable-body-row';\n        if (this.isSelected) {\n            cls += ' active';\n        }\n        if (this.rowIndex % 2 !== 0) {\n            cls += ' datatable-row-odd';\n        }\n        if (this.rowIndex % 2 === 0) {\n            cls += ' datatable-row-even';\n        }\n        if (this.rowClass) {\n            /** @type {?} */\n            const res = this.rowClass(this.row);\n            if (typeof res === 'string') {\n                cls += ` ${res}`;\n            }\n            else if (typeof res === 'object') {\n                /** @type {?} */\n                const keys = Object.keys(res);\n                for (const k of keys) {\n                    if (res[k] === true) {\n                        cls += ` ${k}`;\n                    }\n                }\n            }\n        }\n        return cls;\n    }\n    /**\n     * @return {?}\n     */\n    get columnsTotalWidths() {\n        return this._columnGroupWidths.total;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._rowDiffer.diff(this.row)) {\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * @param {?} index\n     * @param {?} colGroup\n     * @return {?}\n     */\n    trackByGroups(index, colGroup) {\n        return colGroup.type;\n    }\n    /**\n     * @param {?} index\n     * @param {?} column\n     * @return {?}\n     */\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    /**\n     * @return {?}\n     */\n    buildStylesByGroup() {\n        this._groupStyles.left = this.calcStylesByGroup('left');\n        this._groupStyles.center = this.calcStylesByGroup('center');\n        this._groupStyles.right = this.calcStylesByGroup('right');\n        this.cd.markForCheck();\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    calcStylesByGroup(group) {\n        /** @type {?} */\n        const widths = this._columnGroupWidths;\n        /** @type {?} */\n        const offsetX = this.offsetX;\n        /** @type {?} */\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'left') {\n            translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            /** @type {?} */\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\n            /** @type {?} */\n            const totalDiff = widths.total - bodyWidth;\n            /** @type {?} */\n            const offsetDiff = totalDiff - offsetX;\n            /** @type {?} */\n            const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n    /**\n     * @param {?} event\n     * @param {?} index\n     * @return {?}\n     */\n    onActivate(event, index) {\n        event.cellIndex = index;\n        event.rowElement = this._element;\n        this.activate.emit(event);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onKeyDown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isTargetRow = event.target === this._element;\n        /** @type {?} */\n        const isAction = keyCode === Keys.return ||\n            keyCode === Keys.down ||\n            keyCode === Keys.up ||\n            keyCode === Keys.left ||\n            keyCode === Keys.right;\n        if (isAction && isTargetRow) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event,\n                row: this.row,\n                rowElement: this._element\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMouseenter(event) {\n        this.activate.emit({\n            type: 'mouseenter',\n            event,\n            row: this.row,\n            rowElement: this._element\n        });\n    }\n    /**\n     * @param {?=} val\n     * @return {?}\n     */\n    recalculateColumns(val = this.columns) {\n        this._columns = val;\n        /** @type {?} */\n        const colsByPin = columnsByPin(this._columns);\n        this._columnsByPin = columnsByPinArr(this._columns);\n        this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n    }\n    /**\n     * @return {?}\n     */\n    onTreeAction() {\n        this.treeAction.emit();\n    }\n}\nDataTableBodyRowComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-body-row',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `\n            }] }\n];\n/** @nocollapse */\nDataTableBodyRowComponent.ctorParameters = () => [\n    { type: KeyValueDiffers },\n    { type: ScrollbarHelper, decorators: [{ type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef }\n];\nDataTableBodyRowComponent.propDecorators = {\n    columns: [{ type: Input }],\n    innerWidth: [{ type: Input }],\n    expanded: [{ type: Input }],\n    rowClass: [{ type: Input }],\n    row: [{ type: Input }],\n    group: [{ type: Input }],\n    isSelected: [{ type: Input }],\n    rowIndex: [{ type: Input }],\n    displayCheck: [{ type: Input }],\n    treeStatus: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    cssClass: [{ type: HostBinding, args: ['class',] }],\n    rowHeight: [{ type: HostBinding, args: ['style.height.px',] }, { type: Input }],\n    columnsTotalWidths: [{ type: HostBinding, args: ['style.width.px',] }],\n    activate: [{ type: Output }],\n    treeAction: [{ type: Output }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    onMouseenter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.expanded;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.rowClass;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.row;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.group;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.isSelected;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.rowIndex;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.displayCheck;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.treeStatus;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.rowHeight;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.activate;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.treeAction;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._element;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._columnGroupWidths;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._columnsByPin;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._offsetX;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._columns;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._innerWidth;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._groupStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyRowComponent.prototype._rowDiffer;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyRowComponent.prototype.differs;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyRowComponent.prototype.scrollbarHelper;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyRowComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableRowWrapperComponent {\n    /**\n     * @param {?} cd\n     * @param {?} differs\n     */\n    constructor(cd, differs) {\n        this.cd = cd;\n        this.differs = differs;\n        this.rowContextmenu = new EventEmitter(false);\n        this.groupContext = {\n            group: this.row,\n            expanded: this.expanded,\n            rowIndex: this.rowIndex\n        };\n        this.rowContext = {\n            row: this.row,\n            expanded: this.expanded,\n            rowIndex: this.rowIndex\n        };\n        this._expanded = false;\n        this.rowDiffer = differs.find({}).create();\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rowIndex(val) {\n        this._rowIndex = val;\n        this.rowContext.rowIndex = val;\n        this.groupContext.rowIndex = val;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set expanded(val) {\n        this._expanded = val;\n        this.groupContext.expanded = val;\n        this.rowContext.expanded = val;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get expanded() {\n        return this._expanded;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.rowDiffer.diff(this.row)) {\n            this.rowContext.row = this.row;\n            this.groupContext.group = this.row;\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onContextmenu($event) {\n        this.rowContextmenu.emit({ event: $event, row: this.row });\n    }\n    /**\n     * @return {?}\n     */\n    getGroupHeaderStyle() {\n        /** @type {?} */\n        const styles = {};\n        styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n        styles['backface-visibility'] = 'hidden';\n        styles['width'] = this.innerWidth;\n        return styles;\n    }\n}\nDataTableRowWrapperComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-row-wrapper',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `,\n                host: {\n                    class: 'datatable-row-wrapper'\n                }\n            }] }\n];\n/** @nocollapse */\nDataTableRowWrapperComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: KeyValueDiffers }\n];\nDataTableRowWrapperComponent.propDecorators = {\n    innerWidth: [{ type: Input }],\n    rowDetail: [{ type: Input }],\n    groupHeader: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    detailRowHeight: [{ type: Input }],\n    row: [{ type: Input }],\n    groupedRows: [{ type: Input }],\n    rowContextmenu: [{ type: Output }],\n    rowIndex: [{ type: Input }],\n    expanded: [{ type: Input }],\n    onContextmenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.innerWidth;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.rowDetail;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.groupHeader;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.offsetX;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.detailRowHeight;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.row;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.groupedRows;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.rowContextmenu;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.groupContext;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.rowContext;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype.rowDiffer;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype._expanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype._rowIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype.cd;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype.differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableBodyCellComponent {\n    /**\n     * @param {?} element\n     * @param {?} cd\n     */\n    constructor(element, cd) {\n        this.cd = cd;\n        this.activate = new EventEmitter();\n        this.treeAction = new EventEmitter();\n        this.isFocused = false;\n        this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n        this.activateFn = this.activate.emit.bind(this.activate);\n        this.cellContext = {\n            onCheckboxChangeFn: this.onCheckboxChangeFn,\n            activateFn: this.activateFn,\n            row: this.row,\n            group: this.group,\n            value: this.value,\n            column: this.column,\n            rowHeight: this.rowHeight,\n            isSelected: this.isSelected,\n            rowIndex: this.rowIndex,\n            treeStatus: this.treeStatus,\n            onTreeAction: this.onTreeAction.bind(this)\n        };\n        this._element = element.nativeElement;\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    set group(group) {\n        this._group = group;\n        this.cellContext.group = group;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get group() {\n        return this._group;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rowHeight(val) {\n        this._rowHeight = val;\n        this.cellContext.rowHeight = val;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set isSelected(val) {\n        this._isSelected = val;\n        this.cellContext.isSelected = val;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get isSelected() {\n        return this._isSelected;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set expanded(val) {\n        this._expanded = val;\n        this.cellContext.expanded = val;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get expanded() {\n        return this._expanded;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rowIndex(val) {\n        this._rowIndex = val;\n        this.cellContext.rowIndex = val;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    set column(column) {\n        this._column = column;\n        this.cellContext.column = column;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get column() {\n        return this._column;\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    set row(row) {\n        this._row = row;\n        this.cellContext.row = row;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get row() {\n        return this._row;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set sorts(val) {\n        this._sorts = val;\n        this.calcSortDir = this.calcSortDir(val);\n    }\n    /**\n     * @return {?}\n     */\n    get sorts() {\n        return this._sorts;\n    }\n    /**\n     * @param {?} status\n     * @return {?}\n     */\n    set treeStatus(status) {\n        if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n            this._treeStatus = 'collapsed';\n        }\n        else {\n            this._treeStatus = status;\n        }\n        this.cellContext.treeStatus = this._treeStatus;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get treeStatus() {\n        return this._treeStatus;\n    }\n    /**\n     * @return {?}\n     */\n    get columnCssClasses() {\n        /** @type {?} */\n        let cls = 'datatable-body-cell';\n        if (this.column.cellClass) {\n            if (typeof this.column.cellClass === 'string') {\n                cls += ' ' + this.column.cellClass;\n            }\n            else if (typeof this.column.cellClass === 'function') {\n                /** @type {?} */\n                const res = this.column.cellClass({\n                    row: this.row,\n                    group: this.group,\n                    column: this.column,\n                    value: this.value,\n                    rowHeight: this.rowHeight\n                });\n                if (typeof res === 'string') {\n                    cls += res;\n                }\n                else if (typeof res === 'object') {\n                    /** @type {?} */\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true) {\n                            cls += ` ${k}`;\n                        }\n                    }\n                }\n            }\n        }\n        if (!this.sortDir) {\n            cls += ' sort-active';\n        }\n        if (this.isFocused) {\n            cls += ' active';\n        }\n        if (this.sortDir === SortDirection.asc) {\n            cls += ' sort-asc';\n        }\n        if (this.sortDir === SortDirection.desc) {\n            cls += ' sort-desc';\n        }\n        return cls;\n    }\n    /**\n     * @return {?}\n     */\n    get width() {\n        return this.column.width;\n    }\n    /**\n     * @return {?}\n     */\n    get minWidth() {\n        return this.column.minWidth;\n    }\n    /**\n     * @return {?}\n     */\n    get maxWidth() {\n        return this.column.maxWidth;\n    }\n    /**\n     * @return {?}\n     */\n    get height() {\n        /** @type {?} */\n        const height = this.rowHeight;\n        if (isNaN(height)) {\n            return height;\n        }\n        return height + 'px';\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        this.checkValueUpdates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.cellTemplate) {\n            this.cellTemplate.clear();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkValueUpdates() {\n        /** @type {?} */\n        let value = '';\n        if (!this.row || !this.column) {\n            value = '';\n        }\n        else {\n            /** @type {?} */\n            const val = this.column.$$valueGetter(this.row, this.column.prop);\n            /** @type {?} */\n            const userPipe = this.column.pipe;\n            if (userPipe) {\n                value = userPipe.transform(val);\n            }\n            else if (value !== undefined) {\n                value = val;\n            }\n        }\n        if (this.value !== value) {\n            this.value = value;\n            this.cellContext.value = value;\n            this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onFocus() {\n        this.isFocused = true;\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        this.isFocused = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onClick(event) {\n        this.activate.emit({\n            type: 'click',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element\n        });\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onDblClick(event) {\n        this.activate.emit({\n            type: 'dblclick',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element\n        });\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onKeyDown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isTargetCell = event.target === this._element;\n        /** @type {?} */\n        const isAction = keyCode === Keys.return ||\n            keyCode === Keys.down ||\n            keyCode === Keys.up ||\n            keyCode === Keys.left ||\n            keyCode === Keys.right;\n        if (isAction && isTargetCell) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event,\n                row: this.row,\n                group: this.group,\n                rowHeight: this.rowHeight,\n                column: this.column,\n                value: this.value,\n                cellElement: this._element\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onCheckboxChange(event) {\n        this.activate.emit({\n            type: 'checkbox',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element,\n            treeStatus: 'collapsed'\n        });\n    }\n    /**\n     * @param {?} sorts\n     * @return {?}\n     */\n    calcSortDir(sorts) {\n        if (!sorts) {\n            return;\n        }\n        /** @type {?} */\n        const sort = sorts.find((/**\n         * @param {?} s\n         * @return {?}\n         */\n        (s) => {\n            return s.prop === this.column.prop;\n        }));\n        if (sort) {\n            return sort.dir;\n        }\n    }\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    stripHtml(html) {\n        if (!html.replace) {\n            return html;\n        }\n        return html.replace(/<\\/?[^>]+(>|$)/g, '');\n    }\n    /**\n     * @return {?}\n     */\n    onTreeAction() {\n        this.treeAction.emit(this.row);\n    }\n    /**\n     * @param {?} column\n     * @param {?} row\n     * @return {?}\n     */\n    calcLeftMargin(column, row) {\n        /** @type {?} */\n        const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n        return column.isTreeColumn ? row.level * levelIndent : 0;\n    }\n}\nDataTableBodyCellComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-body-cell',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `\n            }] }\n];\n/** @nocollapse */\nDataTableBodyCellComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nDataTableBodyCellComponent.propDecorators = {\n    displayCheck: [{ type: Input }],\n    group: [{ type: Input }],\n    rowHeight: [{ type: Input }],\n    isSelected: [{ type: Input }],\n    expanded: [{ type: Input }],\n    rowIndex: [{ type: Input }],\n    column: [{ type: Input }],\n    row: [{ type: Input }],\n    sorts: [{ type: Input }],\n    treeStatus: [{ type: Input }],\n    activate: [{ type: Output }],\n    treeAction: [{ type: Output }],\n    cellTemplate: [{ type: ViewChild, args: ['cellTemplate', { read: ViewContainerRef, static: true },] }],\n    columnCssClasses: [{ type: HostBinding, args: ['class',] }],\n    width: [{ type: HostBinding, args: ['style.width.px',] }],\n    minWidth: [{ type: HostBinding, args: ['style.minWidth.px',] }],\n    maxWidth: [{ type: HostBinding, args: ['style.maxWidth.px',] }],\n    height: [{ type: HostBinding, args: ['style.height',] }],\n    onFocus: [{ type: HostListener, args: ['focus',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }],\n    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onDblClick: [{ type: HostListener, args: ['dblclick', ['$event'],] }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.displayCheck;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.activate;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.treeAction;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.cellTemplate;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.sanitizedValue;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.value;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.sortDir;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.isFocused;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.onCheckboxChangeFn;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.activateFn;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.cellContext;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._isSelected;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._sorts;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._column;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._row;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._group;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._rowHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._rowIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._expanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._treeStatus;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} selected\n * @param {?} row\n * @param {?} comparefn\n * @return {?}\n */\nfunction selectRows(selected, row, comparefn) {\n    /** @type {?} */\n    const selectedIndex = comparefn(row, selected);\n    if (selectedIndex > -1) {\n        selected.splice(selectedIndex, 1);\n    }\n    else {\n        selected.push(row);\n    }\n    return selected;\n}\n/**\n * @param {?} selected\n * @param {?} rows\n * @param {?} index\n * @param {?} prevIndex\n * @param {?} comparefn\n * @return {?}\n */\nfunction selectRowsBetween(selected, rows, index, prevIndex, comparefn) {\n    /** @type {?} */\n    const reverse = index < prevIndex;\n    for (let i = 0; i < rows.length; i++) {\n        /** @type {?} */\n        const row = rows[i];\n        /** @type {?} */\n        const greater = i >= prevIndex && i <= index;\n        /** @type {?} */\n        const lesser = i <= prevIndex && i >= index;\n        /** @type {?} */\n        let range = { start: 0, end: 0 };\n        if (reverse) {\n            range = {\n                start: index,\n                end: prevIndex\n            };\n        }\n        else {\n            range = {\n                start: prevIndex,\n                end: index + 1\n            };\n        }\n        if ((reverse && lesser) || (!reverse && greater)) {\n            // if in the positive range to be added to `selected`, and\n            // not already in the selected array, add it\n            if (i >= range.start && i <= range.end) {\n                selected.push(row);\n            }\n        }\n    }\n    return selected;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction Model() { }\nif (false) {\n    /** @type {?} */\n    Model.prototype.type;\n    /** @type {?} */\n    Model.prototype.event;\n    /** @type {?} */\n    Model.prototype.row;\n    /** @type {?} */\n    Model.prototype.rowElement;\n    /** @type {?} */\n    Model.prototype.cellElement;\n    /** @type {?} */\n    Model.prototype.cellIndex;\n}\nclass DataTableSelectionComponent {\n    constructor() {\n        this.activate = new EventEmitter();\n        this.select = new EventEmitter();\n    }\n    /**\n     * @param {?} event\n     * @param {?} index\n     * @param {?} row\n     * @return {?}\n     */\n    selectRow(event, index, row) {\n        if (!this.selectEnabled)\n            return;\n        /** @type {?} */\n        const chkbox = this.selectionType === SelectionType.checkbox;\n        /** @type {?} */\n        const multi = this.selectionType === SelectionType.multi;\n        /** @type {?} */\n        const multiClick = this.selectionType === SelectionType.multiClick;\n        /** @type {?} */\n        let selected = [];\n        if (multi || chkbox || multiClick) {\n            if (event.shiftKey) {\n                selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n            }\n            else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n                selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\n            }\n            else {\n                selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n            }\n        }\n        else {\n            selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n        }\n        if (typeof this.selectCheck === 'function') {\n            selected = selected.filter(this.selectCheck.bind(this));\n        }\n        this.selected.splice(0, this.selected.length);\n        this.selected.push(...selected);\n        this.prevIndex = index;\n        this.select.emit({\n            selected\n        });\n    }\n    /**\n     * @param {?} model\n     * @param {?} index\n     * @return {?}\n     */\n    onActivate(model, index) {\n        const { type, event, row } = model;\n        /** @type {?} */\n        const chkbox = this.selectionType === SelectionType.checkbox;\n        /** @type {?} */\n        const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\n        if (select) {\n            this.selectRow(event, index, row);\n        }\n        else if (type === 'keydown') {\n            if (((/** @type {?} */ (event))).keyCode === Keys.return) {\n                this.selectRow(event, index, row);\n            }\n            else {\n                this.onKeyboardFocus(model);\n            }\n        }\n        this.activate.emit(model);\n    }\n    /**\n     * @param {?} model\n     * @return {?}\n     */\n    onKeyboardFocus(model) {\n        const { keyCode } = (/** @type {?} */ (model.event));\n        /** @type {?} */\n        const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\n        if (shouldFocus) {\n            /** @type {?} */\n            const isCellSelection = this.selectionType === SelectionType.cell;\n            if (!model.cellElement || !isCellSelection) {\n                this.focusRow(model.rowElement, keyCode);\n            }\n            else if (isCellSelection) {\n                this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n            }\n        }\n    }\n    /**\n     * @param {?} rowElement\n     * @param {?} keyCode\n     * @return {?}\n     */\n    focusRow(rowElement, keyCode) {\n        /** @type {?} */\n        const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n        if (nextRowElement)\n            nextRowElement.focus();\n    }\n    /**\n     * @param {?} rowElement\n     * @param {?} keyCode\n     * @return {?}\n     */\n    getPrevNextRow(rowElement, keyCode) {\n        /** @type {?} */\n        const parentElement = rowElement.parentElement;\n        if (parentElement) {\n            /** @type {?} */\n            let focusElement;\n            if (keyCode === Keys.up) {\n                focusElement = parentElement.previousElementSibling;\n            }\n            else if (keyCode === Keys.down) {\n                focusElement = parentElement.nextElementSibling;\n            }\n            if (focusElement && focusElement.children.length) {\n                return focusElement.children[0];\n            }\n        }\n    }\n    /**\n     * @param {?} cellElement\n     * @param {?} rowElement\n     * @param {?} keyCode\n     * @param {?} cellIndex\n     * @return {?}\n     */\n    focusCell(cellElement, rowElement, keyCode, cellIndex) {\n        /** @type {?} */\n        let nextCellElement;\n        if (keyCode === Keys.left) {\n            nextCellElement = cellElement.previousElementSibling;\n        }\n        else if (keyCode === Keys.right) {\n            nextCellElement = cellElement.nextElementSibling;\n        }\n        else if (keyCode === Keys.up || keyCode === Keys.down) {\n            /** @type {?} */\n            const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n            if (nextRowElement) {\n                /** @type {?} */\n                const children = nextRowElement.getElementsByClassName('datatable-body-cell');\n                if (children.length)\n                    nextCellElement = children[cellIndex];\n            }\n        }\n        if (nextCellElement)\n            nextCellElement.focus();\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    getRowSelected(row) {\n        return this.getRowSelectedIdx(row, this.selected) > -1;\n    }\n    /**\n     * @param {?} row\n     * @param {?} selected\n     * @return {?}\n     */\n    getRowSelectedIdx(row, selected) {\n        if (!selected || !selected.length)\n            return -1;\n        /** @type {?} */\n        const rowId = this.rowIdentity(row);\n        return selected.findIndex((/**\n         * @param {?} r\n         * @return {?}\n         */\n        r => {\n            /** @type {?} */\n            const id = this.rowIdentity(r);\n            return id === rowId;\n        }));\n    }\n}\nDataTableSelectionComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-selection',\n                template: `\n    <ng-content></ng-content>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\nDataTableSelectionComponent.propDecorators = {\n    rows: [{ type: Input }],\n    selected: [{ type: Input }],\n    selectEnabled: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    rowIdentity: [{ type: Input }],\n    selectCheck: [{ type: Input }],\n    activate: [{ type: Output }],\n    select: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.rows;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.selected;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.selectEnabled;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.selectionType;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.rowIdentity;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.selectCheck;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.activate;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.select;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.prevIndex;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction ISummaryColumn() { }\nif (false) {\n    /** @type {?|undefined} */\n    ISummaryColumn.prototype.summaryFunc;\n    /** @type {?|undefined} */\n    ISummaryColumn.prototype.summaryTemplate;\n    /** @type {?} */\n    ISummaryColumn.prototype.prop;\n    /** @type {?|undefined} */\n    ISummaryColumn.prototype.pipe;\n}\n/**\n * @param {?} cells\n * @return {?}\n */\nfunction defaultSumFunc(cells) {\n    /** @type {?} */\n    const cellsWithValues = cells.filter((/**\n     * @param {?} cell\n     * @return {?}\n     */\n    cell => !!cell));\n    if (!cellsWithValues.length) {\n        return null;\n    }\n    if (cellsWithValues.some((/**\n     * @param {?} cell\n     * @return {?}\n     */\n    cell => typeof cell !== 'number'))) {\n        return null;\n    }\n    return cellsWithValues.reduce((/**\n     * @param {?} res\n     * @param {?} cell\n     * @return {?}\n     */\n    (res, cell) => res + cell));\n}\n/**\n * @param {?} cells\n * @return {?}\n */\nfunction noopSumFunc(cells) {\n    return null;\n}\nclass DataTableSummaryRowComponent {\n    constructor() {\n        this.summaryRow = {};\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        if (!this.columns || !this.rows) {\n            return;\n        }\n        this.updateInternalColumns();\n        this.updateValues();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    updateInternalColumns() {\n        this._internalColumns = this.columns.map((/**\n         * @param {?} col\n         * @return {?}\n         */\n        col => (Object.assign({}, col, { cellTemplate: col.summaryTemplate }))));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    updateValues() {\n        this.summaryRow = {};\n        this.columns\n            .filter((/**\n         * @param {?} col\n         * @return {?}\n         */\n        col => !col.summaryTemplate))\n            .forEach((/**\n         * @param {?} col\n         * @return {?}\n         */\n        col => {\n            /** @type {?} */\n            const cellsFromSingleColumn = this.rows.map((/**\n             * @param {?} row\n             * @return {?}\n             */\n            row => row[col.prop]));\n            /** @type {?} */\n            const sumFunc = this.getSummaryFunction(col);\n            this.summaryRow[col.prop] = col.pipe\n                ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\n                : sumFunc(cellsFromSingleColumn);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} column\n     * @return {?}\n     */\n    getSummaryFunction(column) {\n        if (column.summaryFunc === undefined) {\n            return defaultSumFunc;\n        }\n        else if (column.summaryFunc === null) {\n            return noopSumFunc;\n        }\n        else {\n            return column.summaryFunc;\n        }\n    }\n}\nDataTableSummaryRowComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'datatable-summary-row',\n                template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `,\n                host: {\n                    class: 'datatable-summary-row'\n                }\n            }] }\n];\nDataTableSummaryRowComponent.propDecorators = {\n    rows: [{ type: Input }],\n    columns: [{ type: Input }],\n    rowHeight: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    innerWidth: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.rows;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.columns;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.rowHeight;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.offsetX;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.innerWidth;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype._internalColumns;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.summaryRow;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxDatatableModule {\n    /**\n     * Configure global configuration via INgxDatatableConfig\n     * @param {?} configuration\n     * @return {?}\n     */\n    static forRoot(configuration) {\n        return {\n            ngModule: NgxDatatableModule,\n            providers: [{ provide: 'configuration', useValue: configuration }]\n        };\n    }\n}\nNgxDatatableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n                declarations: [\n                    DataTableFooterTemplateDirective,\n                    VisibilityDirective,\n                    DraggableDirective,\n                    ResizeableDirective,\n                    OrderableDirective,\n                    LongPressDirective,\n                    ScrollerComponent,\n                    DatatableComponent,\n                    DataTableColumnDirective,\n                    DataTableHeaderComponent,\n                    DataTableHeaderCellComponent,\n                    DataTableBodyComponent,\n                    DataTableFooterComponent,\n                    DataTablePagerComponent,\n                    ProgressBarComponent,\n                    DataTableBodyRowComponent,\n                    DataTableRowWrapperComponent,\n                    DatatableRowDetailDirective,\n                    DatatableGroupHeaderDirective,\n                    DatatableRowDetailTemplateDirective,\n                    DataTableBodyCellComponent,\n                    DataTableSelectionComponent,\n                    DataTableColumnHeaderDirective,\n                    DataTableColumnCellDirective,\n                    DataTableColumnCellTreeToggle,\n                    DatatableFooterDirective,\n                    DatatableGroupHeaderTemplateDirective,\n                    DataTableSummaryRowComponent\n                ],\n                exports: [\n                    DatatableComponent,\n                    DatatableRowDetailDirective,\n                    DatatableGroupHeaderDirective,\n                    DatatableRowDetailTemplateDirective,\n                    DataTableColumnDirective,\n                    DataTableColumnHeaderDirective,\n                    DataTableColumnCellDirective,\n                    DataTableColumnCellTreeToggle,\n                    DataTableFooterTemplateDirective,\n                    DatatableFooterDirective,\n                    DataTablePagerComponent,\n                    DatatableGroupHeaderTemplateDirective\n                ]\n            },] }\n];\n/**\n * Interface definition for INgxDatatableConfig global configuration\n * @record\n */\nfunction INgxDatatableConfig() { }\nif (false) {\n    /** @type {?} */\n    INgxDatatableConfig.prototype.messages;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst ClickType = {\n    single: 'single',\n    double: 'double',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column Type\n * @record\n */\nfunction TableColumn() { }\nif (false) {\n    /**\n     * Internal unique id\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.$$id;\n    /**\n     * Internal for column width distributions\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.$$oldWidth;\n    /**\n     * Internal for setColumnDefaults\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.$$valueGetter;\n    /**\n     * Determines if column is checkbox\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.checkboxable;\n    /**\n     * Determines if the column is frozen to the left\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.frozenLeft;\n    /**\n     * Determines if the column is frozen to the right\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.frozenRight;\n    /**\n     * The grow factor relative to other columns. Same as the flex-grow\n     * API from http =//www.w3.org/TR/css3-flexbox/. Basically;\n     * take any available extra width and distribute it proportionally\n     * according to all columns' flexGrow values.\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.flexGrow;\n    /**\n     * Min width of the column\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.minWidth;\n    /**\n     * Max width of the column\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.maxWidth;\n    /**\n     * The default width of the column, in pixels\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.width;\n    /**\n     * Can the column be resized\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.resizeable;\n    /**\n     * Custom sort comparator\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.comparator;\n    /**\n     * Custom pipe transforms\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.pipe;\n    /**\n     * Can the column be sorted\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.sortable;\n    /**\n     * Can the column be re-arranged by dragging\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.draggable;\n    /**\n     * Whether the column can automatically resize to fill space in the table.\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.canAutoResize;\n    /**\n     * Column name or label\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.name;\n    /**\n     * Property to bind to the row. Example:\n     *\n     * `someField` or `some.field.nested`, 0 (numeric)\n     *\n     * If left blank, will use the name as camel case conversion\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.prop;\n    /**\n     * Cell template ref\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.cellTemplate;\n    /**\n     * Header template ref\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.headerTemplate;\n    /**\n     * Tree toggle template ref\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.treeToggleTemplate;\n    /**\n     * CSS Classes for the cell\n     *\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.cellClass;\n    /**\n     * CSS classes for the header\n     *\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.headerClass;\n    /**\n     * Header checkbox enabled\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.headerCheckboxable;\n    /**\n     * Is tree displayed on this column\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.isTreeColumn;\n    /**\n     * Width of the tree level indent\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.treeLevelIndent;\n    /**\n     * Summary function\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.summaryFunc;\n    /**\n     * Summary cell template ref\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.summaryTemplate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction SortPropDir() { }\nif (false) {\n    /** @type {?} */\n    SortPropDir.prototype.dir;\n    /** @type {?} */\n    SortPropDir.prototype.prop;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nif (typeof document !== 'undefined' && !document.elementsFromPoint) {\n    document.elementsFromPoint = elementsFromPoint;\n}\n/*tslint:disable*/\n/**\n * Polyfill for `elementsFromPoint`\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\n * https://gist.github.com/oslego/7265412\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction elementsFromPoint(x, y) {\n    /** @type {?} */\n    const elements = [];\n    /** @type {?} */\n    const previousPointerEvents = [];\n    /** @type {?} */\n    let current;\n    // TODO: window.getComputedStyle should be used with inferred type (Element)\n    /** @type {?} */\n    let i;\n    /** @type {?} */\n    let d;\n    //if (document === undefined) return elements;\n    // get all elements via elementFromPoint, and remove them from hit-testing in order\n    while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\n        // push the element and its current style\n        elements.push(current);\n        previousPointerEvents.push({\n            value: current.style.getPropertyValue('pointer-events'),\n            priority: current.style.getPropertyPriority('pointer-events')\n        });\n        // add \"pointer-events: none\", to get to the underlying element\n        current.style.setProperty('pointer-events', 'none', 'important');\n    }\n    // restore the previous pointer-events values\n    for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]);) {\n        elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n    }\n    // return our results\n    return elements;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ClickType, ColumnChangesService, ColumnMode, ContextmenuType, DataTableBodyCellComponent, DataTableBodyComponent, DataTableBodyRowComponent, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableFooterComponent, DataTableFooterTemplateDirective, DataTableHeaderCellComponent, DataTableHeaderComponent, DataTablePagerComponent, DataTableRowWrapperComponent, DataTableSelectionComponent, DataTableSummaryRowComponent, DatatableComponent, DatatableFooterDirective, DatatableGroupHeaderDirective, DatatableGroupHeaderTemplateDirective, DatatableRowDetailDirective, DatatableRowDetailTemplateDirective, DimensionsHelper, DraggableDirective, Keys, LongPressDirective, NgxDatatableModule, OrderableDirective, ProgressBarComponent, ResizeableDirective, RowHeightCache, ScrollbarHelper, ScrollerComponent, SelectionType, SortDirection, SortType, VisibilityDirective, adjustColumnWidths, camelCase, columnGroupWidths, columnTotalWidth, columnsByPin, columnsByPinArr, columnsTotalWidth, deCamelCase, deepValueGetter, elementsFromPoint, emptyStringGetter, forceFillColumnWidths, getTotalFlexGrow, getVendorPrefixedName, getterForProp, groupRowsByParents, id, isNullOrUndefined, nextSortDir, numericIndexGetter, optionalGetterForProp, orderByComparator, selectRows, selectRowsBetween, setColumnDefaults, shallowValueGetter, sortRows, throttle, throttleable, translateTemplates, translateXY };\n"]}